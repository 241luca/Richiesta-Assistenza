# ================================
# Docker Compose Production - Con Registry Images
# Usa immagini pre-built da GitHub Registry
# ================================

version: '3.8'

services:
  # ==========================================
  # üóÑÔ∏è DATABASE - PostgreSQL
  # ==========================================
  database:
    image: postgres:16-alpine
    container_name: richiesta-assistenza-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-richiesta_assistenza}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ==========================================
  # ‚ö° REDIS - Cache & Sessions
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: richiesta-assistenza-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  # ==========================================
  # üíª BACKEND - Da Registry
  # ==========================================
  backend:
    image: ghcr.io/241luca/richiesta-assistenza-backend:latest
    container_name: richiesta-assistenza-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3200
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@database:5432/${DB_NAME:-richiesta_assistenza}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CORS_ORIGIN: https://richiestaassistenza.it
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - whatsapp-sessions:/app/.wwebjs_auth
    expose:
      - "3200"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3200/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # üé® FRONTEND - Da Registry
  # ==========================================
  frontend:
    image: ghcr.io/241luca/richiesta-assistenza-frontend:latest
    container_name: richiesta-assistenza-frontend
    restart: unless-stopped
    depends_on:
      - backend
    expose:
      - "80"
    networks:
      - app-network

  # ==========================================
  # üîí NGINX PROXY + SSL
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: richiesta-assistenza-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-production.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    networks:
      - app-network

  # ==========================================
  # üîê CERTBOT - SSL Certificates
  # ==========================================
  certbot:
    image: certbot/certbot
    container_name: richiesta-assistenza-certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email lucamambelli@lmtecnologie.it -d richiestaassistenza.it -d www.richiestaassistenza.it --agree-tos

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  whatsapp-sessions:
    driver: local

networks:
  app-network:
    driver: bridge

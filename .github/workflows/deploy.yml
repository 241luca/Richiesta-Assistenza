# ================================
# GitHub Actions - Deploy Automatico
# Richiesta Assistenza v5.1
# ================================

name: 🚀 Deploy Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'DOCUMENTAZIONE/**'
      - '*.md'
      - '.gitignore'
  
  # Deploy manuale
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy anche senza cambiamenti'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  # ==========================================
  # 🔍 CONTROLLI QUALITÀ
  # ==========================================
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: 🧪 Run tests
        run: |
          npm run test
          cd backend && npm test

      - name: 🔍 Lint check
        run: |
          npm run lint
          cd backend && npm run lint

  # ==========================================
  # 🔨 BUILD & PUSH DOCKER IMAGES
  # ==========================================
  build-and-push:
    name: 🔨 Build & Push Images
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ==========================================
      # 🎨 BUILD FRONTEND
      # ==========================================
      - name: 🎨 Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:v${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ==========================================  
      # 💻 BUILD BACKEND
      # ==========================================
      - name: 💻 Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:v${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # 🚀 DEPLOY SU VPS
  # ==========================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            echo "🚀 Starting deployment..."
            
            # Vai nella cartella progetto
            cd /opt/richiesta-assistenza
            
            # Pull latest code
            git pull origin main
            
            # Login al registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull nuove immagini
            docker compose -f docker-compose.production.yml pull
            
            # Backup database prima dell'aggiornamento
            echo "📦 Creating database backup..."
            docker exec richiesta-assistenza-db pg_dump -U postgres richiesta_assistenza > backup/pre-deploy-$(date +%Y%m%d-%H%M%S).sql
            
            # Deploy con zero downtime
            echo "🔄 Deploying with zero downtime..."
            docker compose -f docker-compose.production.yml up -d --no-deps backend
            sleep 10
            docker compose -f docker-compose.production.yml up -d --no-deps frontend
            sleep 5
            
            # Verifica che tutto funzioni
            echo "✅ Testing deployment..."
            curl -f https://richiestaassistenza.it/api/health || exit 1
            curl -f https://richiestaassistenza.it/ || exit 1
            
            # Pulizia immagini vecchie
            docker image prune -f
            
            echo "🎉 Deployment completed successfully!"

      # ==========================================
      # 📧 NOTIFICA DISCORD/SLACK (Opzionale)
      # ==========================================
      - name: 📧 Notify Success
        if: success()
        run: |
          echo "🎉 Deploy SUCCESSFUL to https://richiestaassistenza.it"
          echo "📦 Frontend: ghcr.io/${{ env.IMAGE_NAME_FRONTEND }}:v${{ github.run_number }}"
          echo "💻 Backend: ghcr.io/${{ env.IMAGE_NAME_BACKEND }}:v${{ github.run_number }}"

      - name: 🚨 Notify Failure  
        if: failure()
        run: |
          echo "❌ Deploy FAILED!"
          echo "📧 Check logs and fix issues"

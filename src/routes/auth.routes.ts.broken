      
      return res.status(400).json(
        ResponseFormatter.error(
          'The verification code is incorrect',
          'INVALID_CODE'
        )
      );
    }

    // Enable 2FA
    await prisma.user.update({
      where: { id: user.id },
      data: { twoFactorEnabled: true }
    });
    
    // Audit log per 2FA attivato con successo
    await auditLogService.log({
      action: AuditAction.TWO_FA_ENABLED,
      entityType: 'Authentication',
      entityId: user.id,
      userId: user.id,
      userEmail: user.email,
      userRole: req.user.role,
      ipAddress: req.ip || 'unknown',
      userAgent: req.get('user-agent') || 'unknown',
      sessionId: req.sessionID,
      metadata: {
        step: 'VERIFICATION_COMPLETED',
        twoFactorEnabled: true,
        timestamp: new Date()
      },
      success: true,
      severity: LogSeverity.WARNING,
      category: LogCategory.SECURITY
    });

    logger.info(`2FA enabled for User: ${user.email}`);

    res.json(
      ResponseFormatter.success(
        null,
        '2FA enabled successfully'
      )
    );
  })
);

/**
 * POST /api/auth/2fa/disable
 * Disable 2FA with critical security audit
 */
router.post('/2fa/disable',
  auditCritical('TwoFactorAuth', AuditAction.TWO_FA_DISABLED), // AUDIT MIDDLEWARE AGGIUNTO
  asyncHandler(async (req: AuthRequest, res: any) => {
    if (!req.user) {
      return res.status(401).json(
        ResponseFormatter.error(
          'Authentication required',
          'AUTHENTICATION_REQUIRED'
        )
      );
    }

    const { password } = req.body;

    if (!password) {
      return res.status(400).json(
        ResponseFormatter.error(
          'Password required',
          'PASSWORD_REQUIRED'
        )
      );
    }

    // Verify password
    const user = await prisma.user.findUnique({
      where: { id: req.user.id }
    });

    const isValidPassword = await bcrypt.compare(password, user!.password);

    if (!isValidPassword) {
      await auditLogService.log({
        action: AuditAction.TWO_FA_DISABLED,
        entityType: 'Authentication',
        entityId: req.user.id,
        userId: req.user.id,
        userEmail: user!.email,
        userRole: req.user.role,
        ipAddress: req.ip || 'unknown',
        userAgent: req.get('user-agent') || 'unknown',
        sessionId: req.sessionID,
        metadata: {
          step: 'PASSWORD_VERIFICATION_FAILED',
          reason: 'Invalid password',
          timestamp: new Date()
        },
        success: false,
        errorMessage: 'Invalid password',
        severity: LogSeverity.ERROR,
        category: LogCategory.SECURITY
      });
      
      return res.status(401).json(
        ResponseFormatter.error(
          'Invalid password',
          'INVALID_PASSWORD'
        )
      );
    }

    // Disable 2FA
    await prisma.user.update({
      where: { id: req.user.id },
      data: {
        twoFactorEnabled: false,
        twoFactorSecret: null
      }
    });
    
    // Audit log critico per 2FA disabilitato
    await auditLogService.log({
      action: AuditAction.TWO_FA_DISABLED,
      entityType: 'Authentication',
      entityId: req.user.id,
      userId: req.user.id,
      userEmail: user!.email,
      userRole: req.user.role,
      ipAddress: req.ip || 'unknown',
      userAgent: req.get('user-agent') || 'unknown',
      sessionId: req.sessionID,
      metadata: {
        disabledAt: new Date(),
        verifiedWithPassword: true,
        severity: 'HIGH_RISK_ACTION'
      },
      success: true,
      severity: LogSeverity.CRITICAL,
      category: LogCategory.SECURITY
    });
    
    // Send notification about 2FA being disabled
    try {
      await notificationService.sendToUser({
        userId: req.user.id,
        type: 'SECURITY_ALERT',
        title: '⚠️ 2FA Disabilitato',
        message: 'La verifica in due passaggi è stata disabilitata sul tuo account. Se non sei stato tu, contatta immediatamente il supporto.',
        priority: 'urgent',
        data: {
          disabledAt: new Date(),
          ipAddress: req.ip
        },
        channels: ['email', 'websocket']
      });
    } catch (error) {
      logger.error('Error sending 2FA disabled notification:', error);
    }

    logger.info(`2FA disabled for User: ${user!.email}`);

    res.json(
      ResponseFormatter.success(
        null,
        '2FA disabled successfully'
      )
    );
  })
);

export default router;
# ================================
# Docker Compose - Richiesta Assistenza v5.1
# VPS: 37.27.89.35
# ================================

version: '3.8'

services:
  # ==========================================
  # 🗄️ DATABASE - PostgreSQL
  # ==========================================
  database:
    image: postgres:16-alpine
    container_name: richiesta-assistenza-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-richiesta_assistenza}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ==========================================
  # ⚡ REDIS - Cache & Sessions
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: richiesta-assistenza-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  # ==========================================
  # 💻 BACKEND - Express + Prisma
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: richiesta-assistenza-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3200
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@database:5432/${DB_NAME:-richiesta_assistenza}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      BREVO_API_KEY: ${BREVO_API_KEY}
      WHATSAPP_SESSION_NAME: ${WHATSAPP_SESSION_NAME:-richiesta-assistenza}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - whatsapp-sessions:/app/.wwebjs_auth
    ports:
      - "3200:3200"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3200/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # 🎨 FRONTEND - React + Vite
  # ==========================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: richiesta-assistenza-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3

# ==========================================
# 📦 VOLUMES - Dati persistenti
# ==========================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  whatsapp-sessions:
    driver: local

# ==========================================
# 🔗 NETWORKS
# ==========================================
networks:
  app-network:
    driver: bridge

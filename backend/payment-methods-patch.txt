// PATCH: Aggiungi questo metodo nella classe PaymentService dopo il metodo verifyWebhookSignature
// e prima dei metodi Dashboard

  /**
   * Lista pagamenti con filtri
   */
  async getPayments(filters: any = {}) {
    try {
      const where: any = {};
      
      // Filtri data
      if (filters.from || filters.to) {
        where.createdAt = {};
        if (filters.from) where.createdAt.gte = new Date(filters.from);
        if (filters.to) where.createdAt.lte = new Date(filters.to);
      }
      
      // Filtro stato  
      if (filters.status && filters.status !== '') {
        where.status = filters.status;
      }
      
      // Filtro tipo
      if (filters.type && filters.type !== '') {
        where.type = filters.type;
      }
      
      // Filtro metodo
      if (filters.method && filters.method !== '') {
        where.method = filters.method;
      }
      
      // Ricerca testuale
      if (filters.searchTerm && filters.searchTerm !== '') {
        where.OR = [
          { transactionId: { contains: filters.searchTerm, mode: 'insensitive' } },
          { stripePaymentId: { contains: filters.searchTerm, mode: 'insensitive' } },
          { user: { 
            OR: [
              { email: { contains: filters.searchTerm, mode: 'insensitive' } },
              { firstName: { contains: filters.searchTerm, mode: 'insensitive' } },
              { lastName: { contains: filters.searchTerm, mode: 'insensitive' } }
            ]
          }}
        ];
      }

      const payments = await prisma.payment.findMany({
        where,
        include: {
          user: true,
          quote: {
            include: {
              request: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        },
        take: filters.limit || 100
      });

      return payments || [];
    } catch (error) {
      logger.error('Error getting payments:', error);
      throw error;
    }
  }

  /**
   * Ottiene pagamento per ID
   */
  async getPaymentById(paymentId: string) {
    try {
      const payment = await prisma.payment.findUnique({
        where: { id: paymentId },
        include: {
          user: true,
          quote: {
            include: {
              request: true,
              professional: true
            }
          },
          refunds: true,
          paymentSplits: true
        }
      });

      if (!payment) {
        throw new AppError('Payment not found', 404);
      }

      return payment;
    } catch (error) {
      logger.error('Error getting payment by ID:', error);
      throw error;
    }
  }

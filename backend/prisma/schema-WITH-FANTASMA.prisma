generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WhatsAppMessage {
  id              String             @id @default(cuid())
  messageId       String             @unique
  phoneNumber     String
  message         String?
  direction       String
  status          String
  senderName      String?
  timestamp       DateTime
  from            String?
  to              String?
  author          String?
  type            String?
  mimetype        String?
  isGroupMsg      Boolean            @default(false)
  chatId          String?
  quotedMsgId     String?
  mentionedIds    Json?
  isMedia         Boolean            @default(false)
  isNotification  Boolean            @default(false)
  isPSA           Boolean            @default(false)
  isStarred       Boolean            @default(false)
  isForwarded     Boolean            @default(false)
  fromMe          Boolean            @default(false)
  hasReaction     Boolean            @default(false)
  mediaUrl        String?
  mediaPath       String?
  caption         String?
  filename        String?
  mediaSize       Int?
  latitude        Float?
  longitude       Float?
  locationName    String?
  locationAddress String?
  ack             Int?
  invis           Boolean            @default(false)
  star            Boolean            @default(false)
  broadcast       Boolean            @default(false)
  multicast       Boolean            @default(false)
  rawData         Json?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  userId          String?
  requestId       String?
  request         AssistanceRequest? @relation(fields: [requestId], references: [id])
  user            User?              @relation("UserWhatsAppMessages", fields: [userId], references: [id])

  @@index([phoneNumber])
  @@index([timestamp])
  @@index([chatId])
  @@index([direction])
  @@index([status])
  @@index([userId])
  @@index([requestId])
}

model WhatsAppContact {
  id               String          @id @default(cuid())
  phoneNumber      String          @unique
  whatsappId       String?         @unique
  name             String?
  pushname         String?
  shortName        String?
  businessName     String?
  isMyContact      Boolean         @default(false)
  isUser           Boolean         @default(true)
  isBusiness       Boolean         @default(false)
  isEnterprise     Boolean         @default(false)
  isGroup          Boolean         @default(false)
  isBlocked        Boolean         @default(false)
  profilePicUrl    String?
  statusMessage    String?
  about            String?
  businessCatalog  Json?
  businessHours    Json?
  businessAddress  String?
  businessEmail    String?
  businessCategory String?
  firstMessageAt   DateTime?
  lastMessageAt    DateTime?
  totalMessages    Int             @default(0)
  userId           String?
  professionalId   String?
  tags             String[]
  notes            String?
  isFavorite       Boolean         @default(false)
  customRingtone   String?
  isPinned         Boolean         @default(false)
  isMuted          Boolean         @default(false)
  mutedUntil       DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  syncedAt         DateTime?
  professional     User?           @relation("WhatsAppContactProfessional", fields: [professionalId], references: [id])
  user             User?           @relation("WhatsAppContactUser", fields: [userId], references: [id])
  groups           WhatsAppGroup[] @relation("GroupMembers")

  @@index([isMyContact])
  @@index([userId])
  @@index([professionalId])
  @@index([isBusiness])
}

model WhatsAppGroup {
  id             String            @id @default(cuid())
  groupId        String            @unique
  name           String
  description    String?
  owner          String?
  groupCreatedAt DateTime?
  memberCount    Int               @default(0)
  admins         String[]
  isReadOnly     Boolean           @default(false)
  isAnnouncement Boolean           @default(false)
  groupPicUrl    String?
  inviteLink     String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  members        WhatsAppContact[] @relation("GroupMembers")

  @@index([groupId])
}

model WhatsAppSession {
  id            String    @id @default(cuid())
  sessionName   String    @unique
  sessionData   Json
  isActive      Boolean   @default(true)
  lastConnected DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([sessionName])
  @@index([isActive])
}

model AiConversation {
  id                  String                 @id
  userId              String
  requestId           String?
  subcategoryId       String?
  conversationType    String
  messages            Json
  totalTokens         Int                    @default(0)
  model               String
  startedAt           DateTime               @default(now())
  endedAt             DateTime?
  rating              Int?
  feedback            String?
  metadata            Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime
  request             AssistanceRequest?     @relation(fields: [requestId], references: [id])
  subcategorySettings SubcategoryAiSettings? @relation(fields: [subcategoryId], references: [id])
  user                User                   @relation(fields: [userId], references: [id])
}

model AiSystemSettings {
  id                   String   @id
  name                 String   @unique @default("system")
  systemHelpModel      String   @default("gpt-3.5-turbo")
  systemHelpPrompt     String
  systemHelpKnowledge  Json?
  fallbackModel        String   @default("gpt-3.5-turbo")
  fallbackPrompt       String
  maxTokensPerRequest  Int      @default(2048)
  maxRequestsPerUser   Int      @default(100)
  maxRequestsPerMinute Int      @default(10)
  enableClientAi       Boolean  @default(true)
  enableProfessionalAi Boolean  @default(true)
  enableSystemHelp     Boolean  @default(true)
  logConversations     Boolean  @default(true)
  metadata             Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime
}

model ApiKey {
  id          String    @id
  key         String    @unique
  name        String
  service     String    @unique
  userId      String?
  permissions Json?
  rateLimit   Int       @default(1000)
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  user        User?     @relation(fields: [userId], references: [id])

  @@index([isActive])
  @@index([key])
  @@index([service])
  @@index([userId])
}

model KnowledgeBase {
  id             String      @id @default(cuid())
  professionalId String
  subcategoryId  String
  targetAudience String      @default("professional")
  fileName       String
  originalName   String
  filePath       String
  fileType       String
  fileSize       Int
  description    String?
  uploadedBy     String
  isProcessed    Boolean     @default(false)
  processedAt    DateTime?
  embeddings     Json?
  metadata       Json?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  professional   User        @relation("ProfessionalKnowledgeBase", fields: [professionalId], references: [id])
  subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
  uploader       User        @relation("UploadedKnowledgeBase", fields: [uploadedBy], references: [id])

  @@unique([professionalId, subcategoryId, fileName])
  @@index([professionalId])
  @@index([subcategoryId])
  @@index([targetAudience])
  @@index([isActive])
}

model AssistanceRequest {
  id                     String                  @id
  title                  String
  description            String
  priority               Priority                @default(MEDIUM)
  status                 RequestStatus           @default(PENDING)
  clientId               String
  professionalId         String?
  categoryId             String
  subcategoryId          String?
  address                String?
  city                   String?
  province               String?
  postalCode             String?
  latitude               Float?
  longitude              Float?
  requestedDate          DateTime?
  scheduledDate          DateTime?
  completedDate          DateTime?
  estimatedHours         Float?
  actualHours            Float?
  internalNotes          String?
  publicNotes            String?
  tags                   Json?
  customFields           Json?
  
  // Campi informazioni viaggio - NUOVO
  travelDistance         Float?     // distanza in metri
  travelDuration         Int?       // durata in secondi
  travelDistanceText     String?    // "12.3 km"
  travelDurationText     String?    // "15 min"
  travelCost             Float?     // costo stimato in euro
  travelCalculatedAt     DateTime?  // quando Ã¨ stato calcolato
  
  createdAt              DateTime                @default(now())
  updatedAt              DateTime
  assignedAt             DateTime?
  assignedBy             String?
  assignmentType         AssignmentType?
  aiConversations        AiConversation[]
  assignedByUser         User?                   @relation("RequestAssignedBy", fields: [assignedBy], references: [id])
  category               Category                @relation(fields: [categoryId], references: [id])
  client                 User                    @relation("ClientRequests", fields: [clientId], references: [id])
  professional           User?                   @relation("ProfessionalRequests", fields: [professionalId], references: [id])
  subcategory            Subcategory?            @relation(fields: [subcategoryId], references: [id])
  interventionReports    InterventionReport[]
  messages               Message[]
  quotes                 Quote[]
  attachments            RequestAttachment[]
  chatMessages           RequestChatMessage[]
  updates                RequestUpdate[]
  scheduledInterventions ScheduledIntervention[]
  whatsAppMessages       WhatsAppMessage[]
  Payment                Payment[]
  Invoice                Invoice[]
  review                 Review?
  portfolio              Portfolio?
  complaints             Complaint[]            @relation("RequestComplaints")

  @@index([categoryId])
  @@index([clientId])
  @@index([priority])
  @@index([professionalId])
  @@index([status])
  @@index([subcategoryId])
}

model AuditLog {
  id           String      @id
  userId       String?
  userEmail    String?
  userRole     String?
  ipAddress    String
  userAgent    String
  sessionId    String?
  action       AuditAction
  entityType   String
  entityId     String?
  timestamp    DateTime    @default(now())
  endpoint     String?
  method       String?
  requestId    String?
  oldValues    Json?
  newValues    Json?
  changes      Json?
  metadata     Json?
  success      Boolean
  errorMessage String?
  responseTime Int?
  statusCode   Int?
  severity     LogSeverity
  category     LogCategory
  user         User?       @relation(fields: [userId], references: [id])

  @@index([action, timestamp])
  @@index([category, severity])
  @@index([entityType, entityId])
  @@index([sessionId])
  @@index([timestamp])
  @@index([userId, timestamp])
}

model AuditLogAlert {
  id            String      @id
  name          String
  description   String?
  condition     Json
  severity      LogSeverity
  isActive      Boolean     @default(true)
  lastTriggered DateTime?
  triggerCount  Int         @default(0)
  notifyEmails  Json?
  notifyWebhook String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime

  @@index([isActive])
}

model AuditLogRetention {
  id            String      @id
  category      LogCategory @unique
  retentionDays Int
  isActive      Boolean     @default(true)
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
}

model AutoRemediationLog {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  ruleId            String
  module            String
  success           Boolean
  actionsExecuted   String[] @default([])
  error             String?
  healthScoreBefore Int
  healthScoreAfter  Int?
  timestamp         DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  @@index([module])
  @@index([timestamp])
}

model BackupExecution {
  id           String         @id
  scheduleId   String
  backupId     String?
  status       BackupStatus
  startedAt    DateTime
  completedAt  DateTime?
  duration     Int?
  errorMessage String?
  errorDetails Json?
  metadata     Json?
  createdAt    DateTime       @default(now())
  schedule     BackupSchedule @relation(fields: [scheduleId], references: [id])

  @@index([scheduleId])
  @@index([startedAt])
  @@index([status])
}

model BackupLog {
  id           String       @id
  backupId     String
  level        LogLevel
  message      String
  details      Json?
  createdAt    DateTime     @default(now())
  systemBackup SystemBackup @relation(fields: [backupId], references: [id], onDelete: Cascade)

  @@index([backupId])
  @@index([createdAt])
  @@index([level])
}

model BackupRestore {
  id                String        @id
  backupId          String
  status            RestoreStatus @default(PENDING)
  restorePoint      DateTime
  targetEnvironment String?
  includeDatabase   Boolean       @default(true)
  includeUploads    Boolean       @default(true)
  includeCode       Boolean       @default(false)
  preRestoreBackup  String?
  startedAt         DateTime?
  completedAt       DateTime?
  failedAt          DateTime?
  errorMessage      String?
  errorDetails      Json?
  restoredTables    Json?
  restoredFiles     Json?
  rollbackAvailable Boolean       @default(false)
  metadata          Json?
  restoredById      String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  restoredBy        User          @relation(fields: [restoredById], references: [id])

  @@index([createdAt])
  @@index([status])
}

model BackupSchedule {
  id              String            @id
  name            String
  description     String?
  type            BackupType
  frequency       BackupFrequency
  cronExpression  String?
  timeOfDay       String?
  dayOfWeek       Int?
  dayOfMonth      Int?
  timezone        String            @default("Europe/Rome")
  isActive        Boolean           @default(true)
  includeUploads  Boolean           @default(true)
  includeDatabase Boolean           @default(true)
  includeCode     Boolean           @default(false)
  compression     Boolean           @default(true)
  encrypted       Boolean           @default(false)
  retentionDays   Int               @default(30)
  maxBackups      Int               @default(10)
  notifyOnSuccess Boolean           @default(true)
  notifyOnFailure Boolean           @default(true)
  notifyEmails    Json?
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  metadata        Json?
  createdById     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  executions      BackupExecution[]
  createdBy       User              @relation(fields: [createdById], references: [id])
  systemBackups   SystemBackup[]

  @@index([frequency])
  @@index([isActive])
  @@index([nextRunAt])
}

model Category {
  id              String                       @id
  name            String
  slug            String                       @unique
  description     String?
  icon            String?
  color           String                       @default("#3B82F6")
  textColor       String                       @default("#FFFFFF")
  isActive        Boolean                      @default(true)
  displayOrder    Int                          @default(0)
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime
  requests        AssistanceRequest[]
  depositRules    DepositRule[]
  reportTemplates InterventionReportTemplate[]
  professions     ProfessionCategory[]
  subcategories   Subcategory[]
  portfolios      Portfolio[]

  @@index([isActive])
  @@index([slug])
}

model DepositRule {
  id               String    @id
  name             String
  description      String?
  categoryId       String?
  depositType      String
  fixedAmount      Decimal?  @db.Decimal(10, 2)
  percentageAmount Float?
  rangeRules       Json?
  conditions       Json?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  category         Category? @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([isActive])
}

model HealthCheckResult {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  module        String
  status        String
  score         Int
  checks        Json     @default("[]")
  warnings      String[] @default([])
  errors        String[] @default([])
  metrics       Json?    @default("{}")
  executionTime Int      @default(0)
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@index([module])
  @@index([status])
  @@index([timestamp])
}

model InterventionFieldType {
  id              String                      @id
  code            String                      @unique
  name            String
  description     String?
  icon            String?
  component       String
  validationRules Json?
  defaultConfig   Json?
  isActive        Boolean                     @default(true)
  isSystem        Boolean                     @default(false)
  displayOrder    Int                         @default(0)
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime
  templateFields  InterventionTemplateField[]

  @@index([code])
  @@index([isActive])
}

model InterventionMaterial {
  id             String   @id
  code           String   @unique
  name           String
  description    String?
  category       String?
  subcategory    String?
  brand          String?
  model          String?
  unit           String   @default("pz")
  defaultPrice   Decimal? @db.Decimal(10, 2)
  vatRate        Float    @default(22)
  supplierCode   String?
  supplierName   String?
  barcode        String?  @unique
  qrcode         String?
  imageUrl       String?
  technicalSheet String?
  stockQuantity  Float?
  stockMin       Float?
  stockMax       Float?
  isActive       Boolean  @default(true)
  isService      Boolean  @default(false)
  usageCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime

  @@index([barcode])
  @@index([category])
  @@index([code])
  @@index([name])
}

model InterventionReport {
  id                   String                      @id
  reportNumber         String                      @unique
  requestId            String
  professionalId       String
  clientId             String
  templateId           String?
  statusId             String
  typeId               String
  interventionDate     DateTime
  startTime            DateTime
  endTime              DateTime?
  totalHours           Float?
  travelTime           Float?
  formData             Json
  materials            Json?
  materialsTotal       Decimal?                    @db.Decimal(10, 2)
  photos               Json?
  signatures           Json?
  professionalSignedAt DateTime?
  clientSignedAt       DateTime?
  gpsData              Json?
  weatherData          Json?
  internalNotes        String?
  clientNotes          String?
  followUpRequired     Boolean                     @default(false)
  followUpNotes        String?
  pdfUrl               String?
  pdfGeneratedAt       DateTime?
  isDraft              Boolean                     @default(true)
  sentToClientAt       DateTime?
  viewedByClientAt     DateTime?
  clientIp             String?
  clientUserAgent      String?
  metadata             Json?
  version              Int                         @default(1)
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime
  client               User                        @relation("ClientReports", fields: [clientId], references: [id])
  professional         User                        @relation("ProfessionalReports", fields: [professionalId], references: [id])
  request              AssistanceRequest           @relation(fields: [requestId], references: [id])
  status               InterventionReportStatus    @relation(fields: [statusId], references: [id])
  template             InterventionReportTemplate? @relation(fields: [templateId], references: [id])
  type                 InterventionType            @relation(fields: [typeId], references: [id])

  @@index([clientId])
  @@index([interventionDate])
  @@index([isDraft])
  @@index([professionalId])
  @@index([reportNumber])
  @@index([requestId])
  @@index([statusId])
}

model InterventionReportConfig {
  id                       String   @id
  name                     String   @default("Configurazione Rapporti")
  numberingPrefix          String   @default("RI")
  numberingFormat          String   @default("RI-{YEAR}-{NUMBER:5}")
  currentNumber            Int      @default(0)
  resetYearly              Boolean  @default(true)
  lastResetYear            Int?
  requireSignatures        Boolean  @default(false)
  allowDraftSave           Boolean  @default(true)
  autoSendToClient         Boolean  @default(false)
  enableGPS                Boolean  @default(false)
  enableTimer              Boolean  @default(true)
  enableMaterials          Boolean  @default(true)
  enablePhotos             Boolean  @default(false)
  maxPhotosPerType         Int      @default(5)
  photoTypes               Json?    @default("[\"prima\", \"durante\", \"dopo\"]")
  photoCompressionQuality  Int      @default(80)
  pdfLogo                  String?
  pdfHeader                String?
  pdfFooter                String?
  pdfWatermark             String?
  pdfOrientation           String   @default("portrait")
  pdfFormat                String   @default("A4")
  notifyProfessionalOnSign Boolean  @default(true)
  notifyClientOnCreate     Boolean  @default(true)
  notifyAdminOnIssue       Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime

  @@index([name])
}

model InterventionReportStatus {
  id               String               @id
  code             String               @unique
  name             String
  description      String?
  color            String               @default("#808080")
  bgColor          String               @default("#F3F4F6")
  icon             String?
  allowEdit        Boolean              @default(true)
  allowDelete      Boolean              @default(true)
  requireSignature Boolean              @default(false)
  notifyClient     Boolean              @default(false)
  isFinal          Boolean              @default(false)
  isDefault        Boolean              @default(false)
  nextStatuses     Json?
  permissions      Json?
  isActive         Boolean              @default(true)
  displayOrder     Int                  @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime
  reports          InterventionReport[]

  @@index([code])
  @@index([isActive])
  @@index([isDefault])
}

model InterventionReportTemplate {
  id                    String                       @id
  name                  String
  description           String?
  code                  String?                      @unique
  subcategoryId         String?
  categoryId            String?
  isGeneric             Boolean                      @default(false)
  isActive              Boolean                      @default(true)
  isDefault             Boolean                      @default(false)
  isPublic              Boolean                      @default(true)
  createdBy             String?
  approvedBy            String?
  approvedAt            DateTime?
  version               Int                          @default(1)
  settings              Json?
  requiredSections      Json?
  layout                Json?
  usageCount            Int                          @default(0)
  lastUsedAt            DateTime?
  rating                Float?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime
  reports               InterventionReport[]
  approvedByUser        User?                        @relation("TemplatesApproved", fields: [approvedBy], references: [id])
  category              Category?                    @relation(fields: [categoryId], references: [id])
  createdByUser         User?                        @relation("TemplatesCreated", fields: [createdBy], references: [id])
  subcategory           Subcategory?                 @relation(fields: [subcategoryId], references: [id])
  templateFields        InterventionTemplateField[]
  professionalTemplates ProfessionalReportTemplate[]

  @@index([categoryId])
  @@index([code])
  @@index([isActive])
  @@index([isDefault])
  @@index([subcategoryId])
}

model InterventionTemplateField {
  id              String                     @id
  templateId      String
  code            String
  label           String
  placeholder     String?
  helpText        String?
  tooltip         String?
  fieldTypeId     String
  sectionCode     String?
  displayOrder    Int                        @default(100)
  columnSpan      Int                        @default(12)
  rowNumber       Int                        @default(1)
  groupName       String?
  isRequired      Boolean                    @default(false)
  isReadonly      Boolean                    @default(false)
  isHidden        Boolean                    @default(false)
  showOnPDF       Boolean                    @default(true)
  showOnClient    Boolean                    @default(true)
  showOnMobile    Boolean                    @default(true)
  config          Json?
  dependencies    Json?
  calculations    Json?
  validationRules Json?
  defaultValue    String?
  possibleValues  Json?
  showIf          Json?
  requiredIf      Json?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime
  fieldType       InterventionFieldType      @relation(fields: [fieldTypeId], references: [id])
  template        InterventionReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, code])
  @@index([displayOrder])
  @@index([sectionCode])
  @@index([templateId])
}

model InterventionTemplateSection {
  id              String   @id
  code            String   @unique
  name            String
  description     String?
  icon            String?
  isSystem        Boolean  @default(false)
  isActive        Boolean  @default(true)
  isCollapsible   Boolean  @default(true)
  defaultExpanded Boolean  @default(true)
  defaultOrder    Int      @default(100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime

  @@index([code])
  @@index([isActive])
}

model InterventionType {
  id                String               @id
  code              String               @unique
  name              String
  description       String?
  icon              String?
  color             String               @default("#3B82F6")
  requiresQuote     Boolean              @default(false)
  requiresPhotos    Boolean              @default(false)
  requiresMaterials Boolean              @default(false)
  averageDuration   Float?
  isActive          Boolean              @default(true)
  displayOrder      Int                  @default(0)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime
  reports           InterventionReport[]

  @@index([code])
  @@index([isActive])
}

model KbDocument {
  id               String            @id
  title            String
  description      String?
  documentType     String
  filePath         String
  fileType         String
  fileName         String
  fileSize         Int
  processingStatus String            @default("pending")
  textLength       Int?
  chunkCount       Int?
  errorMessage     String?
  subcategoryId    String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  subcategory      Subcategory?      @relation(fields: [subcategoryId], references: [id])
  chunks           KbDocumentChunk[]

  @@index([processingStatus])
  @@index([subcategoryId])
}

model KbDocumentChunk {
  id         String     @id
  documentId String
  chunkIndex Int
  content    String
  metadata   Json?
  embedding  Json?
  createdAt  DateTime   @default(now())
  document   KbDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([chunkIndex])
  @@index([documentId])
}

model KnowledgeBaseDocument {
  id             String   @id
  title          String
  description    String?
  documentType   String
  category       String?
  subcategoryIds Json?
  filePath       String?
  content        String?
  embeddings     Json?
  language       String   @default("it")
  tags           Json?
  version        String?
  author         String?
  isActive       Boolean  @default(true)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  uploadedById   String?
  uploadedBy     User?    @relation(fields: [uploadedById], references: [id])
}

model LoginHistory {
  id         String   @id
  userId     String
  ipAddress  String?
  userAgent  String?
  success    Boolean
  failReason String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
}

model Message {
  id          String             @id
  requestId   String?
  senderId    String
  recipientId String
  content     String
  attachments Json?
  isRead      Boolean            @default(false)
  readAt      DateTime?
  editedAt    DateTime?
  deletedAt   DateTime?
  createdAt   DateTime           @default(now())
  recipient   User               @relation("MessagesReceived", fields: [recipientId], references: [id])
  request     AssistanceRequest? @relation(fields: [requestId], references: [id])
  sender      User               @relation("MessagesSent", fields: [senderId], references: [id])

  @@index([isRead])
  @@index([recipientId])
  @@index([requestId])
  @@index([senderId])
}

model Notification {
  id          String               @id
  type        String
  title       String
  content     String
  priority    NotificationPriority @default(NORMAL)
  recipientId String
  senderId    String?
  entityType  String?
  entityId    String?
  isRead      Boolean              @default(false)
  readAt      DateTime?
  metadata    Json?
  createdAt   DateTime             @default(now())
  
  recipient   User                 @relation("NotificationsReceived", fields: [recipientId], references: [id])
  sender      User?                @relation("NotificationsSent", fields: [senderId], references: [id])

  @@index([isRead])
  @@index([recipientId])
  @@index([senderId])
}

model NotificationChannel {
  id            String   @id
  code          String   @unique
  name          String
  type          String
  provider      String?
  configuration Json
  isActive      Boolean  @default(true)
  isDefault     Boolean  @default(false)
  priority      Int      @default(0)
  rateLimit     Json?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime

  @@index([code])
  @@index([isActive])
}

model NotificationEvent {
  id          String               @id
  code        String               @unique
  name        String
  description String?
  eventType   String
  entityType  String?
  conditions  Json?
  templateId  String
  isActive    Boolean              @default(true)
  delay       Int                  @default(0)
  retryPolicy Json?
  metadata    Json?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime
  template    NotificationTemplate @relation(fields: [templateId], references: [id])

  @@index([code])
  @@index([eventType])
  @@index([isActive])
  @@index([templateId])
}

model NotificationLog {
  id             String                @id
  notificationId String?
  templateId     String?
  eventId        String?
  recipientId    String
  recipientEmail String?
  recipientPhone String?
  channel        String
  status         String
  subject        String?
  content        String
  variables      Json?
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  failedAt       DateTime?
  failureReason  String?
  retryCount     Int                   @default(0)
  metadata       Json?
  createdAt      DateTime              @default(now())
  recipient      User                  @relation(fields: [recipientId], references: [id])
  template       NotificationTemplate? @relation(fields: [templateId], references: [id])

  @@index([channel])
  @@index([createdAt])
  @@index([recipientId])
  @@index([sentAt])
  @@index([status])
  @@index([templateId])
}

// Log Email inviate
model EmailLog {
  id          String   @id @default(cuid())
  to          String
  from        String
  subject     String
  body        String   @db.Text
  status      String   @default("pending") // pending, sent, failed
  provider    String?  // brevo, smtp, etc
  messageId   String?  // ID messaggio provider
  error       String?  @db.Text
  metadata    Json?
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  
  @@index([to])
  @@index([status])
  @@index([createdAt])
}

model NotificationPreference {
  id                 String   @id
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  notificationTypes  Json?
  quietHoursStart    String?
  quietHoursEnd      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  user               User     @relation(fields: [userId], references: [id])
}

model NotificationQueue {
  id            String               @id
  templateId    String
  eventId       String?
  recipientId   String
  channel       String
  priority      NotificationPriority
  scheduledFor  DateTime
  status        String               @default("pending")
  attempts      Int                  @default(0)
  maxAttempts   Int                  @default(3)
  lastAttemptAt DateTime?
  nextRetryAt   DateTime?
  data          Json
  error         String?
  createdAt     DateTime             @default(now())
  processedAt   DateTime?

  @@index([channel])
  @@index([priority])
  @@index([recipientId])
  @@index([scheduledFor])
  @@index([status])
}

model NotificationTemplate {
  id              String               @id
  code            String               @unique
  name            String
  description     String?
  category        String
  subject         String?
  htmlContent     String
  textContent     String?
  smsContent      String?
  whatsappContent String?
  variables       Json
  channels        Json
  priority        NotificationPriority @default(NORMAL)
  isActive        Boolean              @default(true)
  isSystem        Boolean              @default(false)
  version         Int                  @default(1)
  createdBy       String?
  updatedBy       String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime
  events          NotificationEvent[]
  logs            NotificationLog[]

  @@index([category])
  @@index([code])
  @@index([isActive])
}

model OldPayment {
  id              String           @id
  quoteId         String?
  userId          String
  amount          Decimal          @db.Decimal(10, 2)
  currency        String           @default("EUR")
  status          OldPaymentStatus @default(PENDING)
  type            OldPaymentType   @default(FULL_PAYMENT)
  method          String?
  transactionId   String?          @unique
  stripePaymentId String?          @unique
  receiptUrl      String?
  description     String?
  notes           String?
  metadata        Json?
  processedAt     DateTime?
  failedAt        DateTime?
  failureReason   String?
  refundedAt      DateTime?
  refundAmount    Decimal?         @db.Decimal(10, 2)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  quote           Quote?           @relation("OldPaymentQuote", fields: [quoteId], references: [id])
  user            User             @relation(fields: [userId], references: [id])

  @@index([quoteId])
  @@index([status])
  @@index([stripePaymentId])
  @@index([transactionId])
  @@index([userId])
}

model PerformanceMetrics {
  id                  String   @id @default(dbgenerated("gen_random_uuid()"))
  timestamp           DateTime @default(now())
  cpuUsage            Int
  memoryUsage         Int
  databaseConnections Int
  apiResponseTime     Int
  requestsPerMinute   Int
  errorRate           Float
  metrics             Json?    @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  @@index([timestamp])
}

model Profession {
  id           String               @id
  name         String               @unique
  slug         String               @unique
  description  String?
  isActive     Boolean              @default(true)
  displayOrder Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime
  categories   ProfessionCategory[]
  users        User[]

  @@index([isActive])
  @@index([slug])
}

model ProfessionCategory {
  id           String     @id @default(cuid())
  professionId String
  categoryId   String
  isDefault    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  isActive     Boolean    @default(true)
  category     Category   @relation(fields: [categoryId], references: [id])
  profession   Profession @relation(fields: [professionId], references: [id])

  @@unique([professionId, categoryId])
  @@index([professionId])
  @@index([categoryId])
}

model ProfessionalAiCustomization {
  id                   String                @id
  professionalId       String
  subcategoryId        String
  settingsId           String
  customSystemPrompt   String?
  customKnowledgeBase  Json?
  customTone           String?
  customInitialMessage String?
  customTemperature    Float?
  customMaxTokens      Int?
  preferredExamples    Json?
  avoidTopics          Json?
  specializations      Json?
  isActive             Boolean               @default(true)
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  professional         User                  @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  settings             SubcategoryAiSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@unique([professionalId, subcategoryId])
}

model ProfessionalAiSettings {
  id               String      @id @default(dbgenerated("gen_random_uuid()"))
  professionalId   String
  subcategoryId    String
  modelName        String      @default("gpt-3.5-turbo")
  temperature      Float       @default(0.7)
  maxTokens        Int         @default(2000)
  responseStyle    String      @default("formal")
  detailLevel      String      @default("intermediate")
  useKnowledgeBase Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  systemPrompt     String?
  subcategory      Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  professional     User        @relation(fields: [professionalId], references: [id], onDelete: Cascade, map: "ProfessionalAiSettings_userId_fkey")

  @@unique([professionalId, subcategoryId], map: "ProfessionalAiSettings_userId_subcategoryId_key")
}

model ClientAiSettings {
  id               String      @id @default(dbgenerated("gen_random_uuid()"))
  professionalId   String
  subcategoryId    String
  modelName        String      @default("gpt-3.5-turbo")
  temperature      Float       @default(0.7)
  maxTokens        Int         @default(1500)
  responseStyle    String      @default("friendly")
  detailLevel      String      @default("basic")
  useKnowledgeBase Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  systemPrompt     String?
  professional     User        @relation("ClientAiSettings", fields: [professionalId], references: [id], onDelete: Cascade)
  subcategory      Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@unique([professionalId, subcategoryId])
}

model ProfessionalCertification {
  id         String    @id
  userId     String
  name       String
  issuer     String
  validUntil DateTime?
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfessionalMaterial {
  id              String    @id
  professionalId  String
  baseMaterialId  String?
  code            String
  name            String
  description     String?
  unit            String    @default("pz")
  defaultQuantity Float     @default(1)
  price           Decimal   @db.Decimal(10, 2)
  vatRate         Float     @default(22)
  supplierName    String?
  supplierCode    String?
  notes           String?
  category        String?
  isFavorite      Boolean   @default(false)
  usageCount      Int       @default(0)
  lastUsedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  professional    User      @relation(fields: [professionalId], references: [id])

  @@unique([professionalId, code])
  @@index([professionalId, category])
  @@index([professionalId, isFavorite])
}

model ProfessionalPricing {
  id          String   @id
  userId      String   @unique
  hourlyRate  Float    @default(50.00)
  minimumRate Float    @default(30.00)
  costPerKm   Float    @default(0.50)
  freeKm      Int      @default(10)
  supplements Json     @default("{\"festivo\": 50, \"urgente\": 30, \"weekend\": 20, \"notturno\": 30}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfessionalReportFolder {
  id             String   @id
  professionalId String
  name           String
  description    String?
  color          String   @default("#808080")
  icon           String?
  isDefault      Boolean  @default(false)
  isArchive      Boolean  @default(false)
  displayOrder   Int      @default(0)
  reportCount    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  professional   User     @relation(fields: [professionalId], references: [id])

  @@unique([professionalId, name])
  @@index([displayOrder])
  @@index([professionalId])
}

model ProfessionalReportPhrase {
  id             String    @id
  professionalId String
  category       String
  code           String
  title          String
  content        String
  tags           Json?
  usageCount     Int       @default(0)
  lastUsedAt     DateTime?
  isActive       Boolean   @default(true)
  isFavorite     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  professional   User      @relation(fields: [professionalId], references: [id])

  @@unique([professionalId, code])
  @@index([isFavorite])
  @@index([professionalId, category])
}

model ProfessionalReportSettings {
  id                   String   @id
  professionalId       String   @unique
  businessName         String?
  businessLogo         String?
  businessAddress      String?
  businessPhone        String?
  businessEmail        String?
  businessWebsite      String?
  vatNumber            String?
  fiscalCode           String?
  reaNumber            String?
  defaultTemplateId    String?
  autoStartTimer       Boolean  @default(false)
  autoGpsLocation      Boolean  @default(false)
  autoWeather          Boolean  @default(false)
  quickPhrases         Boolean  @default(true)
  quickMaterials       Boolean  @default(true)
  showLastReports      Boolean  @default(true)
  defaultLanguage      String   @default("it")
  signatureImage       String?
  signatureName        String?
  signatureTitle       String?
  notifyOnSign         Boolean  @default(true)
  notifyOnView         Boolean  @default(false)
  dailySummary         Boolean  @default(false)
  weeklyReport         Boolean  @default(false)
  pdfTemplate          String   @default("professional")
  includeTerms         Boolean  @default(false)
  termsText            String?
  includePrivacy       Boolean  @default(false)
  privacyText          String?
  invoicePrefix        String   @default("FT")
  invoiceStartNumber   Int      @default(1)
  currentInvoiceNumber Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  professional         User     @relation(fields: [professionalId], references: [id])
}

model ProfessionalReportTemplate {
  id             String                      @id
  professionalId String
  baseTemplateId String?
  name           String
  description    String?
  isDefault      Boolean                     @default(false)
  customSettings Json?
  customFields   Json?
  customLayout   Json?
  isActive       Boolean                     @default(true)
  usageCount     Int                         @default(0)
  lastUsedAt     DateTime?
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime
  baseTemplate   InterventionReportTemplate? @relation(fields: [baseTemplateId], references: [id])
  professional   User                        @relation(fields: [professionalId], references: [id])

  @@index([isActive])
  @@index([isDefault])
  @@index([professionalId])
}

model ProfessionalSkill {
  id        String   @id
  userId    String
  name      String
  level     String   @default("intermediate")
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfessionalUserSubcategory {
  id              String      @id
  userId          String
  subcategoryId   String
  experienceYears Int?
  certifications  Json?
  portfolio       Json?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  experienceLevel String      @default("INTERMEDIATE")
  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id])
  user            User        @relation(fields: [userId], references: [id])

  @@unique([userId, subcategoryId])
  @@index([subcategoryId])
  @@index([userId])
}

model Quote {
  id              String            @id
  requestId       String
  professionalId  String
  title           String
  description     String?
  amount          Decimal           @db.Decimal(10, 2)
  currency        String            @default("EUR")
  status          QuoteStatus       @default(DRAFT)
  version         Int               @default(1)
  validUntil      DateTime?
  expiresAt       DateTime?
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  terms           String?
  notes           String?
  internalNotes   String?
  attachments     Json?
  customFields    Json?
  depositRequired Boolean           @default(false)
  depositAmount   Decimal?          @db.Decimal(10, 2)
  depositPaid     Boolean           @default(false)
  depositPaidAt   DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  oldPayments     OldPayment[]      @relation("OldPaymentQuote")
  professional    User              @relation(fields: [professionalId], references: [id])
  request         AssistanceRequest @relation(fields: [requestId], references: [id])
  items           QuoteItem[]
  revisions       QuoteRevision[]
  Payment         Payment[]
  Invoice         Invoice[]

  @@index([professionalId])
  @@index([requestId])
  @@index([status])
}

model QuoteItem {
  id          String   @id
  quoteId     String
  description String
  quantity    Float    @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  taxRate     Float    @default(0)
  taxAmount   Decimal  @default(0) @db.Decimal(10, 2)
  discount    Decimal  @default(0) @db.Decimal(10, 2)
  order       Int      @default(1)
  notes       String?
  metadata    Json?
  createdAt   DateTime @default(now())
  quote       Quote    @relation(fields: [quoteId], references: [id])

  @@index([quoteId])
}

model QuoteRevision {
  id        String   @id
  quoteId   String
  userId    String
  version   Int
  changes   Json
  reason    String?
  createdAt DateTime @default(now())
  quote     Quote    @relation(fields: [quoteId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([quoteId])
  @@index([userId])
}

model QuoteTemplate {
  id          String   @id
  userId      String
  name        String
  description String?
  template    Json
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model RequestAttachment {
  id           String            @id
  requestId    String
  userId       String
  fileName     String
  originalName String
  filePath     String
  fileType     String
  fileSize     Int
  isPublic     Boolean           @default(true)
  description  String?
  metadata     Json?
  createdAt    DateTime          @default(now())
  request      AssistanceRequest @relation(fields: [requestId], references: [id])
  user         User              @relation(fields: [userId], references: [id])

  @@index([requestId])
  @@index([userId])
}

model RequestChatMessage {
  id          String            @id
  requestId   String
  userId      String
  message     String
  messageType MessageType       @default(TEXT)
  attachments Json?
  isEdited    Boolean           @default(false)
  editedAt    DateTime?
  isDeleted   Boolean           @default(false)
  deletedAt   DateTime?
  isRead      Boolean           @default(false)
  readBy      Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime
  request     AssistanceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([isDeleted])
  @@index([requestId])
  @@index([userId])
}

model RequestUpdate {
  id          String            @id
  requestId   String
  userId      String
  updateType  String
  description String
  metadata    Json?
  createdAt   DateTime          @default(now())
  request     AssistanceRequest @relation(fields: [requestId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@index([requestId])
  @@index([userId])
}

// Sistema Recensioni - Aggiunto il 05/10/2025
model Review {
  id            String   @id @default(cuid())
  rating        Int      // 1-5 stelle
  comment       String?  @db.Text
  
  // Relazioni
  requestId     String   @unique
  request       AssistanceRequest  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  clientId      String
  client        User     @relation("ClientReviews", fields: [clientId], references: [id])
  
  professionalId String
  professional   User     @relation("ProfessionalReviews", fields: [professionalId], references: [id])
  
  // Metadata
  isVerified    Boolean  @default(false)
  helpfulCount  Int      @default(0)
  reportedCount Int      @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([professionalId])
  @@index([clientId])
  @@index([rating])
}

model ScheduledIntervention {
  id                  String            @id
  requestId           String
  professionalId      String
  proposedDate        DateTime
  confirmedDate       DateTime?
  status              String            @default("PROPOSED")
  description         String?
  estimatedDuration   Int?
  actualDuration      Int?
  notes               String?
  clientConfirmed     Boolean           @default(false)
  clientDeclineReason String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  createdBy           String?
  createdByUser       User?             @relation("InterventionsCreated", fields: [createdBy], references: [id])
  professional        User              @relation("ProfessionalInterventions", fields: [professionalId], references: [id])
  request             AssistanceRequest @relation(fields: [requestId], references: [id])

  // â Index singoli esistenti
  @@index([professionalId])
  @@index([proposedDate])
  @@index([requestId])
  @@index([status])
  
  // â FIX PROBLEMA 2: Index compositi per ottimizzare query calendario
  @@index([professionalId, proposedDate, status]) // Query calendario completa
  @@index([professionalId, status]) // Filtra per professionista + stato
  @@index([proposedDate, status]) // Filtra per data + stato
}

model Subcategory {
  id                            String                        @id
  name                          String
  slug                          String
  description                   String?
  requirements                  String?
  color                         String?
  textColor                     String?
  isActive                      Boolean                       @default(true)
  displayOrder                  Int                           @default(0)
  categoryId                    String
  createdAt                     DateTime                      @default(now())
  updatedAt                     DateTime
  requests                      AssistanceRequest[]
  clientAiSettings              ClientAiSettings[]
  reportTemplates               InterventionReportTemplate[]
  kbDocuments                   KbDocument[]
  knowledgeBase                 KnowledgeBase[]
  knowledgeBaseConfigs          KnowledgeBaseConfig[]         @relation("SubcategoryKBConfigs")
  professionalAiSettings        ProfessionalAiSettings[]
  professionalUserSubcategories ProfessionalUserSubcategory[]
  category                      Category                      @relation(fields: [categoryId], references: [id])
  aiSettings                    SubcategoryAiSettings?

  @@unique([categoryId, slug])
  @@index([categoryId])
  @@index([isActive])
}

model SubcategoryAiSettings {
  id                         String                        @id
  subcategoryId              String                        @unique
  modelName                  String                        @default("gpt-3.5-turbo")
  temperature                Float                         @default(0.7)
  maxTokens                  Int                           @default(2048)
  topP                       Float                         @default(1)
  frequencyPenalty           Float                         @default(0)
  presencePenalty            Float                         @default(0)
  systemPrompt               String
  knowledgeBasePrompt        String?
  responseStyle              ResponseStyle                 @default(FORMAL)
  detailLevel                DetailLevel                   @default(INTERMEDIATE)
  includeDiagrams            Boolean                       @default(false)
  includeReferences          Boolean                       @default(false)
  useKnowledgeBase           Boolean                       @default(false)
  isActive                   Boolean                       @default(true)
  metadata                   Json?
  createdAt                  DateTime                      @default(now())
  updatedAt                  DateTime
  aiConversations            AiConversation[]
  professionalCustomizations ProfessionalAiCustomization[]
  subcategory                Subcategory                   @relation(fields: [subcategoryId], references: [id])

  @@index([subcategoryId])
}

model SystemBackup {
  id              String          @id
  name            String
  description     String?
  type            BackupType
  status          BackupStatus    @default(PENDING)
  fileSize        BigInt?
  filePath        String?
  downloadUrl     String?
  compression     Boolean         @default(true)
  encrypted       Boolean         @default(false)
  encryptionKey   String?
  checksum        String?
  includeUploads  Boolean         @default(true)
  includeDatabase Boolean         @default(true)
  includeCode     Boolean         @default(false)
  databaseTables  Json?
  startedAt       DateTime?
  completedAt     DateTime?
  failedAt        DateTime?
  errorMessage    String?
  errorDetails    Json?
  retentionDays   Int             @default(30)
  expiresAt       DateTime?
  deletedAt       DateTime?
  metadata        Json?
  createdById     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  scheduleId      String?
  logs            BackupLog[]
  createdBy       User            @relation(fields: [createdById], references: [id])
  schedule        BackupSchedule? @relation(fields: [scheduleId], references: [id])

  @@index([createdAt])
  @@index([deletedAt])
  @@index([expiresAt])
  @@index([status])
}

model SystemSetting {
  id          String   @id
  key         String   @unique
  value       String
  type        String   @default("string")
  label       String
  description String?
  category    String   @default("general")
  isEditable  Boolean  @default(true)
  isPublic    Boolean  @default(false)
  validation  Json?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([isPublic])
  @@index([key])
}

model TestHistory {
  id          Int      @id @default(autoincrement())
  category    String
  passed      Int      @default(0)
  failed      Int      @default(0)
  skipped     Int      @default(0)
  totalTests  Int      @default(0)
  duration    Float    @default(0)
  successRate Int      @default(0)
  timestamp   String
  reportData  Json?
  createdAt   DateTime @default(now())

  @@index([category])
  @@index([createdAt])
  @@index([successRate])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model User {
  id                             String                        @id
  email                          String                        @unique
  username                       String                        @unique
  password                       String
  firstName                      String
  lastName                       String
  fullName                       String
  phone                          String?
  role                           Role                          @default(CLIENT)
  avatar                         String?
  profileImage                   String?                       // Campo per foto profilo obbligatoria
  bio                            String?
  status                         String                        @default("offline")
  lastSeenAt                     DateTime?
  codiceFiscale                  String?
  partitaIva                     String?
  ragioneSociale                 String?
  pec                            String?
  sdi                            String?
  address                        String?
  city                           String?
  province                       String?
  postalCode                     String?
  country                        String                        @default("IT")
  profession                     String?
  specializations                Json?
  hourlyRate                     Decimal?                      @db.Decimal(10, 2)
  currency                       String                        @default("EUR")
  serviceAreas                   Json?
  workAddress                    String?
  workCity                       String?
  workProvince                   String?
  workPostalCode                 String?
  workLatitude                   Float?
  workLongitude                  Float?
  useResidenceAsWorkAddress      Boolean                       @default(false)
  travelRatePerKm                Decimal?                      @db.Decimal(10, 2)
  twoFactorSecret                String?
  twoFactorEnabled               Boolean                       @default(false)
  emailVerified                  Boolean                       @default(false)
  emailVerifiedAt                DateTime?
  lastLoginAt                    DateTime?
  loginAttempts                  Int                           @default(0)
  lockedUntil                    DateTime?
  createdAt                      DateTime                      @default(now())
  updatedAt                      DateTime
  latitude                       Float?
  longitude                      Float?
  canSelfAssign                  Boolean                       @default(true)
  pricingData                    Json?
  professionId                   String?
  approvalStatus                 String?                       @default("PENDING")
  approvedAt                     DateTime?
  approvedBy                     String?
  rejectionReason                String?
  
  // â SISTEMA VERIFICA PROFESSIONISTI v5.1 - Badge Verificato
  isVerified        Boolean  @default(false)
  verifiedAt        DateTime?
  verificationNotes String?  @db.Text
  
  documentsVerified    Boolean  @default(false)
  backgroundCheck      Boolean  @default(false)
  certificatesVerified Boolean  @default(false)
  
  aiConversations                AiConversation[]
  apiKeys                        ApiKey[]
  assignedRequests               AssistanceRequest[]           @relation("RequestAssignedBy")
  clientRequests                 AssistanceRequest[]           @relation("ClientRequests")
  professionalRequests           AssistanceRequest[]           @relation("ProfessionalRequests")
  auditLogs                      AuditLog[]
  backupRestores                 BackupRestore[]
  backupSchedules                BackupSchedule[]
  clientAiSettings               ClientAiSettings[]            @relation("ClientAiSettings")
  documentTemplates              DocumentTemplate[]
  clientReports                  InterventionReport[]          @relation("ClientReports")
  professionalReports            InterventionReport[]          @relation("ProfessionalReports")
  approvedTemplates              InterventionReportTemplate[]  @relation("TemplatesApproved")
  createdTemplates               InterventionReportTemplate[]  @relation("TemplatesCreated")
  professionalKnowledgeBase      KnowledgeBase[]               @relation("ProfessionalKnowledgeBase")
  uploadedKnowledgeBase          KnowledgeBase[]               @relation("UploadedKnowledgeBase")
  knowledgeBaseConfigs           KnowledgeBaseConfig[]         @relation("ProfessionalKBConfigs")
  knowledgeBaseDocuments         KnowledgeBaseDocument[]
  legalDocumentsCreated          LegalDocument[]               @relation("LegalDocumentCreator")
  legalVersionsApproved          LegalDocumentVersion[]        @relation("VersionApprover")
  legalVersionsArchived          LegalDocumentVersion[]        @relation("VersionArchiver")
  legalVersionsCreated           LegalDocumentVersion[]        @relation("VersionCreator")
  legalVersionsPublished         LegalDocumentVersion[]        @relation("VersionPublisher")
  loginHistory                   LoginHistory[]
  messagesReceived               Message[]                     @relation("MessagesReceived")
  messagesSent                   Message[]                     @relation("MessagesSent")
  notificationsReceived          Notification[]                @relation("NotificationsReceived")
  notificationsSent              Notification[]                @relation("NotificationsSent")
  notificationLogs               NotificationLog[]
  notificationPreference         NotificationPreference?
  oldPayments                    OldPayment[]
  professionalAiCustomizations   ProfessionalAiCustomization[]
  professionalAiSettings         ProfessionalAiSettings[]
  professionalCertifications     ProfessionalCertification[]
  professionalMaterials          ProfessionalMaterial[]
  professionalPricing            ProfessionalPricing?
  professionalReportFolders      ProfessionalReportFolder[]
  professionalReportPhrases      ProfessionalReportPhrase[]
  professionalReportSettings     ProfessionalReportSettings?
  professionalReportTemplates    ProfessionalReportTemplate[]
  professionalSkills             ProfessionalSkill[]
  professionalUserSubcategories  ProfessionalUserSubcategory[]
  quotes                         Quote[]
  quoteRevisions                 QuoteRevision[]
  quoteTemplates                 QuoteTemplate[]
  requestAttachments             RequestAttachment[]
  requestChatMessages            RequestChatMessage[]
  requestUpdates                 RequestUpdate[]
  interventionsCreated           ScheduledIntervention[]       @relation("InterventionsCreated")
  professionalInterventions      ScheduledIntervention[]       @relation("ProfessionalInterventions")
  scriptExecutions               ScriptExecution[]
  systemBackups                  SystemBackup[]
  professionData                 Profession?                   @relation(fields: [professionId], references: [id])
  legalAcceptances               UserLegalAcceptance[]
  whatsAppContactsAsProfessional WhatsAppContact[]             @relation("WhatsAppContactProfessional")
  whatsAppContactsAsUser         WhatsAppContact[]             @relation("WhatsAppContactUser")
  whatsAppMessages               WhatsAppMessage[]             @relation("UserWhatsAppMessages")
  CalendarSettings               CalendarSettings?
  CalendarAvailability           CalendarAvailability[]
  CalendarException              CalendarException[]
  CalendarBlock                  CalendarBlock[]
  GoogleCalendarToken            GoogleCalendarToken?

  // Nuove relazioni per sistema pagamenti v5.0
  paymentSettings          ProfessionalPaymentSettings?
  paymentSettingsUpdatedBy ProfessionalPaymentSettings[] @relation("PaymentSettingsUpdatedBy")
  paymentSplits            PaymentSplit[]                @relation("ProfessionalSplits")
  paymentsAsProfessional   Payment[]                     @relation("ProfessionalPayments")
  paymentsAsClient         Payment[]                     @relation("ClientPayments")
  paymentsCreatedBy        Payment[]                     @relation("PaymentCreatedBy")
  invoicesAsProfessional   Invoice[]                     @relation("ProfessionalInvoices")
  invoicesAsCustomer       Invoice[]                     @relation("CustomerInvoices")
  invoicesCreatedBy        Invoice[]                     @relation("InvoiceCreatedBy")
  payouts                  Payout[]                      @relation("ProfessionalPayouts")
  payoutsProcessedBy       Payout[]                      @relation("PayoutProcessedBy")
  refundsCreatedBy         Refund[]                      @relation("RefundCreatedBy")
  commissionRules          CommissionRule[]
  stripeConnect            StripeConnect?
  created_by               String?                       @db.VarChar(100)
  
  // Relazioni per sistema recensioni
  reviewsGiven     Review[] @relation("ClientReviews")
  reviewsReceived  Review[] @relation("ProfessionalReviews")
  
  // Relazioni per sistema portfolio
  portfolios        Portfolio[] @relation("ProfessionalPortfolio")
  
  // â SISTEMA REFERRAL - NUOVO v5.1
  referralCode      String?   @unique // Codice personale utente
  referralsSent     Referral[] @relation("ReferralsSent")
  referralsReceived Referral[] @relation("ReferralsReceived")
  userPoints        UserPoints?
  pointTransactions PointTransaction[]
  moduleHistoryActions ModuleHistory[]
  moduleActivations    ModuleActivation[]  // Storia attivazioni moduli
  
  // â SISTEMA PEC (Posta Elettronica Certificata) - NUOVO 08/01/2025
  complaints        Complaint[]       @relation("UserComplaints")
  complaintDrafts   ComplaintDraft[]  @relation("UserComplaintDrafts")

  @@index([email])
  @@index([latitude, longitude])
  @@index([role])
  @@index([workLatitude, workLongitude])
  @@index([createdAt])
}

model CleanupConfig {
  id                String   @id @default(cuid())
  name              String   @unique
  projectPath       String   @default("")
  targetDirectory   String
  basePath          String?
  directoryFormat   String   @default("CLEANUP-{YYYY}-{MM}-{DD}-{HH}-{mm}-{ss}")
  maxDepth          Int      @default(3)
  bufferSize        Int      @default(104857600)
  timeout           Int      @default(60000)
  retentionDays     Int      @default(30)
  autoCleanup       Boolean  @default(false)
  autoCleanupDays   Int      @default(30)
  createReadme      Boolean  @default(true)
  preserveStructure Boolean  @default(true)
  notifyOnCleanup   Boolean  @default(true)
  enablePreview     Boolean  @default(true)
  notifyEmails      String[]
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([name])
  @@index([isActive])
}

model CleanupPattern {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  pattern     String    @unique
  description String?
  type        String    @default("glob")
  category    String?
  isActive    Boolean   @default(true)
  priority    Int       @default(100)
  action      String    @default("move")
  metadata    Json?
  usageCount  Int       @default(0)
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  createdBy   String?

  @@index([isActive])
  @@index([category])
  @@index([priority])
}

model CleanupExcludeFile {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  fileName    String   @unique
  description String?
  reason      String?
  criticality String   @default("normal")
  isActive    Boolean  @default(true)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  createdBy   String?

  @@index([isActive])
  @@index([criticality])
}

model CleanupExcludeDirectory {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  directory   String   @unique
  description String?
  reason      String?
  recursive   Boolean  @default(true)
  isActive    Boolean  @default(true)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  createdBy   String?

  @@index([isActive])
}

model CleanupLog {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  executionId    String
  operation      String
  status         String
  targetPath     String?
  filesProcessed Int       @default(0)
  filesSkipped   Int       @default(0)
  totalSize      BigInt    @default(0)
  errorMessage   String?
  errorDetails   Json?
  metadata       Json?
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  duration       Int?
  executedBy     String
  createdAt      DateTime  @default(now())

  @@index([executionId])
  @@index([operation])
  @@index([status])
  @@index([startedAt])
  @@index([executedBy])
}

model CleanupStats {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  date              DateTime @unique @default(now())
  totalExecutions   Int      @default(0)
  successfulRuns    Int      @default(0)
  failedRuns        Int      @default(0)
  totalFilesCleanup Int      @default(0)
  totalSizeCleanup  BigInt   @default(0)
  averageDuration   Int      @default(0)
  mostUsedPattern   String?
  lastExecutionId   String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  @@index([date])
}

model CleanupSchedule {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  cronExpression String
  timezone       String    @default("Europe/Rome")
  configName     String    @default("default")
  runOnStartup   Boolean   @default(false)
  catchUp        Boolean   @default(false)
  isActive       Boolean   @default(true)
  lastRun        DateTime?
  nextRun        DateTime?
  totalRuns      Int       @default(0)
  successRuns    Int       @default(0)
  failedRuns     Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([isActive])
  @@index([nextRun])
}

model CleanupPreview {
  id              String   @id @default(cuid())
  sessionId       String   @unique
  files           Json
  totalFiles      Int      @default(0)
  totalSize       BigInt   @default(0)
  matchedPatterns Json?
  configUsed      Json?
  validUntil      DateTime
  executed        Boolean  @default(false)
  createdBy       String?
  createdAt       DateTime @default(now())

  @@index([sessionId])
  @@index([validUntil])
}

model ScriptConfiguration {
  id                   String            @id @default(cuid())
  scriptName           String            @unique
  displayName          String
  description          String
  category             ScriptCategory
  risk                 ScriptRisk
  filePath             String
  timeout              Int               @default(60000)
  requiresConfirmation Boolean           @default(false)
  allowedRoles         Role[]
  icon                 String?
  color                String?
  order                Int               @default(0)
  purpose              String?
  whenToUse            String?
  whatItChecks         Json?
  interpreteOutput     Json?
  commonIssues         Json?
  sections             Json?
  parameters           Json?
  defaultParams        Json?
  hasQuickMode         Boolean           @default(false)
  isComplexScript      Boolean           @default(false)
  isEnabled            Boolean           @default(true)
  isVisible            Boolean           @default(true)
  isDangerous          Boolean           @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  createdBy            String?
  lastModifiedBy       String?
  executions           ScriptExecution[] @relation("ScriptExecutions")

  @@index([category])
  @@index([isEnabled, isVisible])
  @@index([scriptName])
}

model ScriptExecution {
  id             String               @id @default(cuid())
  scriptName     String
  scriptId       String?
  executedBy     String
  startedAt      DateTime             @default(now())
  completedAt    DateTime?
  output         String?
  error          String?
  exitCode       Int?
  success        Boolean              @default(false)
  duration       Int?
  parameters     Json?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  executedByUser User                 @relation(fields: [executedBy], references: [id])
  scriptConfig   ScriptConfiguration? @relation("ScriptExecutions", fields: [scriptId], references: [id])
}

model HealthCheckSummary {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  overallStatus String
  overallScore  Int
  data          Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@index([overallStatus])
  @@index([createdAt])
}

model KnowledgeBaseConfig {
  id                     String      @id @default(cuid())
  professionalId         String
  subcategoryId          String
  targetAudience         String      @default("professional")
  maxPerDocument         Int         @default(4000)
  maxTotalCharacters     Int         @default(8000)
  searchKeywordMinLength Int         @default(3)
  contextBeforeKeyword   Int         @default(500)
  contextAfterKeyword    Int         @default(500)
  defaultChunkSize       Int         @default(1000)
  chunkOverlap           Int         @default(100)
  enableSmartSearch      Boolean     @default(true)
  enableAutoProcess      Boolean     @default(false)
  includeFullDocument    Boolean     @default(false)
  includeMetadata        Boolean     @default(true)
  includeFileName        Boolean     @default(true)
  customPromptPrefix     String?
  customPromptSuffix     String?
  cacheEnabled           Boolean     @default(true)
  cacheTTL               Int         @default(3600)
  isActive               Boolean     @default(true)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  professional           User        @relation("ProfessionalKBConfigs", fields: [professionalId], references: [id])
  subcategory            Subcategory @relation("SubcategoryKBConfigs", fields: [subcategoryId], references: [id])

  @@unique([professionalId, subcategoryId, targetAudience])
  @@index([professionalId])
  @@index([subcategoryId])
  @@index([targetAudience])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String
  description String?
  isActive    Boolean  @default(true)
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

model LegalDocument {
  id           String                 @id @default(cuid())
  type         LegalDocumentType
  typeConfigId String?
  internalName String
  displayName  String
  description  String?
  icon         String?
  isActive     Boolean                @default(false)
  isRequired   Boolean                @default(true)
  sortOrder    Int                    @default(0)
  metadata     Json?
  customFields Json?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  createdBy    String
  creator      User                   @relation("LegalDocumentCreator", fields: [createdBy], references: [id])
  typeConfig   DocumentTypeConfig?    @relation("DocumentType", fields: [typeConfigId], references: [id])
  versions     LegalDocumentVersion[]
  acceptances  UserLegalAcceptance[]

  @@unique([type, internalName])
  @@index([type, isActive])
  @@index([isRequired])
  @@index([typeConfigId])
}

model LegalDocumentVersion {
  id              String                @id @default(cuid())
  documentId      String
  version         String
  versionNotes    String?
  title           String
  content         String
  contentPlain    String?
  contentChecksum String?
  summary         String?
  effectiveDate   DateTime
  expiryDate      DateTime?
  language        String                @default("it")
  status          VersionStatus         @default(DRAFT)
  requiresAccept  Boolean               @default(true)
  notifyUsers     Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  createdBy       String
  approvedAt      DateTime?
  approvedBy      String?
  publishedAt     DateTime?
  publishedBy     String?
  archivedAt      DateTime?
  archivedBy      String?
  metadata        Json?
  approver        User?                 @relation("VersionApprover", fields: [approvedBy], references: [id])
  archiver        User?                 @relation("VersionArchiver", fields: [archivedBy], references: [id])
  creator         User                  @relation("VersionCreator", fields: [createdBy], references: [id])
  document        LegalDocument         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  publisher       User?                 @relation("VersionPublisher", fields: [publishedBy], references: [id])
  acceptances     UserLegalAcceptance[]

  @@unique([documentId, version])
  @@index([status, effectiveDate])
  @@index([documentId, status])
}

model UserLegalAcceptance {
  id            String               @id @default(cuid())
  userId        String
  documentId    String
  versionId     String
  acceptedAt    DateTime             @default(now())
  expiresAt     DateTime?
  ipAddress     String
  ipCountry     String?
  userAgent     String?
  sessionId     String?
  method        AcceptanceMethod
  source        String?
  metadata      Json?
  isActive      Boolean              @default(true)
  revokedAt     DateTime?
  revokedReason String?
  document      LegalDocument        @relation(fields: [documentId], references: [id])
  user          User                 @relation(fields: [userId], references: [id])
  version       LegalDocumentVersion @relation(fields: [versionId], references: [id])

  @@unique([userId, documentId, versionId])
  @@index([userId, acceptedAt])
  @@index([userId, isActive])
  @@index([documentId, versionId])
  @@index([acceptedAt])
}

model LegalDocumentTemplate {
  id        String            @id @default(cuid())
  name      String            @unique
  type      LegalDocumentType
  language  String            @default("it")
  title     String
  content   String
  variables Json?
  category  String?
  isDefault Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([type, language])
  @@index([category])
}

model DocumentTypeConfig {
  id                String          @id @default(cuid())
  code              String          @unique
  name              String
  displayName       String
  description       String?
  icon              String?
  color             String?
  category          String?
  sortOrder         Int             @default(0)
  isSystem          Boolean         @default(false)
  isActive          Boolean         @default(true)
  isRequired        Boolean         @default(false)
  requiresApproval  Boolean         @default(true)
  requiresSignature Boolean         @default(false)
  notifyOnCreate    Boolean         @default(true)
  notifyOnUpdate    Boolean         @default(true)
  notifyOnExpiry    Boolean         @default(true)
  expiryDays        Int?
  defaultTemplate   String?
  variables         Json?
  workflowSteps     Json?
  approverRoles     String[]
  publisherRoles    String[]
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdBy         String?
  documents         LegalDocument[] @relation("DocumentType")

  @@index([category])
  @@index([isActive])
  @@index([sortOrder])
}

model DocumentCategory {
  id          String             @id @default(cuid())
  code        String             @unique
  name        String
  description String?
  icon        String?
  color       String?
  parentId    String?
  sortOrder   Int                @default(0)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  parent      DocumentCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    DocumentCategory[] @relation("CategoryHierarchy")

  @@index([parentId])
  @@index([isActive])
}

model ApprovalWorkflowConfig {
  id                       String   @id @default(cuid())
  name                     String   @unique
  description              String?
  documentType             String?
  steps                    Json
  notificationConfig       Json?
  autoApproveAfterDays     Int?
  autoPublishAfterApproval Boolean  @default(false)
  autoArchiveAfterDays     Int?
  isActive                 Boolean  @default(true)
  isDefault                Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  createdBy                String?

  @@index([documentType])
  @@index([isActive])
}

model DocumentSystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  category    String
  description String?
  dataType    String
  isEditable  Boolean  @default(true)
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([category])
  @@index([key])
}

model DocumentCustomField {
  id           String   @id @default(cuid())
  documentType String?
  fieldName    String
  fieldLabel   String
  fieldType    String
  isRequired   Boolean  @default(false)
  defaultValue String?
  options      Json?
  validation   Json?
  helpText     String?
  sortOrder    Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([documentType, fieldName])
  @@index([documentType])
  @@index([isActive])
}

model DocumentConfigAudit {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  oldValues  Json?
  newValues  Json?
  userId     String
  userName   String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
}

model DocumentPermission {
  id                 String   @id @default(cuid())
  role               String
  documentType       String?
  canCreate          Boolean  @default(false)
  canRead            Boolean  @default(true)
  canUpdate          Boolean  @default(false)
  canDelete          Boolean  @default(false)
  canSubmitReview    Boolean  @default(false)
  canApprove         Boolean  @default(false)
  canPublish         Boolean  @default(false)
  canArchive         Boolean  @default(false)
  canViewDrafts      Boolean  @default(false)
  canViewAll         Boolean  @default(false)
  canExport          Boolean  @default(false)
  canImport          Boolean  @default(false)
  canManageTemplates Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([role, documentType])
  @@index([role])
}

model DocumentNotificationTemplate {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  description    String?
  documentType   String?
  eventType      String
  subject        String
  bodyHtml       String
  bodyText       String
  variables      Json?
  channels       String[]
  recipientRoles String[]
  includeAdmins  Boolean  @default(true)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@index([documentType, eventType])
  @@index([isActive])
}

model DocumentUIConfig {
  id        String   @id @default(cuid())
  page      String
  role      String?
  layout    Json
  actions   Json
  fields    Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([page, role])
  @@index([page])
}

model DocumentTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String
  content     String
  metadata    Json?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdBy   User      @relation(fields: [createdById], references: [id])

  @@index([createdById])
  @@index([deletedAt])
}

// ==========================================
// SISTEMA REFERRAL - NUOVO v5.1
// ==========================================

// Sistema punti semplice per referral
model UserPoints {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  totalEarned Int    @default(0)
  totalSpent  Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user         User               @relation(fields: [userId], references: [id])
  transactions PointTransaction[]
  
  @@index([userId])
}

// Transazioni punti
model PointTransaction {
  id          String              @id @default(cuid())
  userId      String
  points      Int                 // Positivo = guadagno, negativo = spesa
  type        PointTransactionType
  description String
  referralId  String?             // Se collegato a referral
  metadata    Json?
  createdAt   DateTime            @default(now())
  
  // â FIX RELAZIONE: Campo mancante per UserPoints
  userPointsId String?
  userPoints   UserPoints? @relation(fields: [userPointsId], references: [id])
  
  user     User        @relation(fields: [userId], references: [id])
  referral Referral?   @relation(fields: [referralId], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([userPointsId])
}

// Sistema Referral
model Referral {
  id          String @id @default(cuid())
  
  // Referrer (chi invita)
  referrerId  String
  referrer    User   @relation("ReferralsSent", fields: [referrerId], references: [id])
  
  // Referee (chi Ã¨ invitato)
  refereeId   String? @unique
  referee     User?   @relation("ReferralsReceived", fields: [refereeId], references: [id])
  
  code        String  @unique // Codice univoco: MARIO2024ABC
  email       String? // Email invitato (prima registrazione)
  
  status      ReferralStatus @default(PENDING)
  
  // Tracking
  clickedAt      DateTime?
  registeredAt   DateTime?
  firstRequestAt DateTime?
  
  // Rewards
  referrerRewardGiven Boolean @default(false)
  refereeRewardGiven  Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  pointTransactions PointTransaction[]
  moduleHistory     ModuleHistory[]
  moduleActivations ModuleActivation[]  // Storia attivazioni
  
  @@index([referrerId])
  @@index([code])
  @@index([status])
  @@index([createdAt])
}

// ==========================================
// PORTFOLIO LAVORI PRIMA/DOPO - NUOVO v5.1
// ==========================================

model Portfolio {
  id             String   @id @default(cuid())
  title          String
  description    String?  @db.Text
  
  // Immagini prima/dopo
  beforeImage    String   // URL foto PRIMA
  afterImage     String   // URL foto DOPO
  
  // Metadata aggiuntive immagini (opzionale)
  additionalImages Json?   // Array di URL immagini aggiuntive
  
  // Relazioni
  professionalId String
  professional   User     @relation("ProfessionalPortfolio", fields: [professionalId], references: [id])
  
  requestId      String?  @unique
  request        AssistanceRequest? @relation(fields: [requestId], references: [id])
  
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])
  
  // VisibilitÃ  e statistiche
  isPublic       Boolean  @default(true)
  viewCount      Int      @default(0)
  
  // Dati tecnici
  technicalDetails String? @db.Text  // Dettagli tecnici del lavoro
  materialsUsed    String? @db.Text  // Materiali utilizzati
  duration         String?            // Durata del lavoro
  cost             Float?             // Costo indicativo (opzionale)
  
  // SEO e ricerca
  tags             String[]           // Tag per ricerca
  location         String?            // Luogo del lavoro
  
  // Date
  workCompletedAt  DateTime?          // Data completamento lavoro
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([professionalId])
  @@index([categoryId])
  @@index([isPublic])
  @@index([viewCount])
}

enum AssignmentType {
  STAFF
  SELF
  AUTOMATIC
}

enum AuditAction {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_CHANGED
  PASSWORD_RESET_REQUESTED
  PASSWORD_RESET_COMPLETED
  TWO_FA_ENABLED
  TWO_FA_DISABLED
  TWO_FA_FAILED
  SESSION_EXPIRED
  CREATE
  READ
  UPDATE
  DELETE
  BULK_CREATE
  BULK_UPDATE
  BULK_DELETE
  REQUEST_CREATED
  REQUEST_ASSIGNED
  REQUEST_UPDATED
  REQUEST_CANCELLED
  REQUEST_COMPLETED
  QUOTE_CREATED
  QUOTE_SENT
  QUOTE_ACCEPTED
  QUOTE_REJECTED
  PAYMENT_INITIATED
  PAYMENT_PROCESSED
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  PERMISSION_GRANTED
  PERMISSION_REVOKED
  ROLE_CHANGED
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_EXCEEDED
  UNAUTHORIZED_ACCESS
  API_KEY_CREATED
  API_KEY_REVOKED
  BACKUP_CREATED
  BACKUP_RESTORED
  SYSTEM_ERROR
  INTEGRATION_FAILED
  EMAIL_SENT
  EMAIL_FAILED
  EXPORT_DATA
  IMPORT_DATA
  DATA_ANONYMIZED
  DATA_DELETED
  CLEANUP_STARTED
  CLEANUP_COMPLETED
  CLEANUP_FAILED
  CLEANUP_FOLDER_DELETED
  CLEANUP_CONFIG_UPDATED
}

enum BackupFrequency {
  MANUAL
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  DELETED
}

enum BackupType {
  FULL
  DATABASE
  FILES
  CODE
  INCREMENTAL
  DIFFERENTIAL
}

enum DetailLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum LogCategory {
  SECURITY
  BUSINESS
  SYSTEM
  COMPLIANCE
  PERFORMANCE
  USER_ACTIVITY
  API
  INTEGRATION
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum LogSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  SYSTEM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum OldPaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum OldPaymentType {
  DEPOSIT
  FULL_PAYMENT
  PARTIAL_PAYMENT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum QuoteStatus {
  DRAFT
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum RequestStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ResponseStyle {
  FORMAL
  INFORMAL
  TECHNICAL
  EDUCATIONAL
}

enum RestoreStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  ROLLED_BACK
}

enum Role {
  SUPER_ADMIN
  ADMIN
  PROFESSIONAL
  CLIENT
}

enum ScriptRisk {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ScriptCategory {
  DATABASE
  MAINTENANCE
  REPORT
  SECURITY
  UTILITY
  ANALYSIS
  TESTING
}

enum LegalDocumentType {
  PRIVACY_POLICY
  TERMS_SERVICE
  COOKIE_POLICY
  DPA
  SLA
  NDA
  EULA
  DISCLAIMER
  COPYRIGHT
  ACCEPTABLE_USE
  CUSTOM
}

enum VersionStatus {
  DRAFT
  REVIEW
  APPROVED
  SCHEDULED
  PUBLISHED
  ARCHIVED
  SUPERSEDED
}

enum AcceptanceMethod {
  EXPLICIT_CLICK
  IMPLICIT_SCROLL
  API
  IMPORT
  REGISTRATION
  LOGIN
  PURCHASE
  EMAIL_CONFIRMATION
  SMS_CONFIRMATION
  SIGNATURE
}

// ==========================================
// ENUM SISTEMA REFERRAL - NUOVO v5.1
// ==========================================

enum ReferralStatus {
  PENDING      // Invito inviato, non ancora registrato
  REGISTERED   // Referee registrato
  CONVERTED    // Referee ha completato prima richiesta
  EXPIRED      // Scaduto (90 giorni)
}

enum PointTransactionType {
  REFERRAL_SIGNUP    // Punti per registrazione referee
  REFERRAL_CONVERSION // Punti per conversione referee
  WELCOME_BONUS      // Bonus benvenuto
  MANUAL_ADJUSTMENT  // Aggiustamento manuale
  REWARD_REDEMPTION  // Riscatto premio
  SYSTEM_CREDIT      // Credito sistema
}

// ==========================================
// CALENDARIO PROFESSIONALE - NUOVE TABELLE
// ==========================================

model CalendarSettings {
  id                          String    @id @default(cuid())
  professionalId              String    @unique
  defaultView                 String    @default("week") // month, week, day, list
  weekStartsOn                Int       @default(1) // 0 = Sunday, 1 = Monday
  timeSlotDuration            Int       @default(30) // in minuti
  minTime                     String    @default("08:00")
  maxTime                     String    @default("20:00")
  showWeekends                Boolean   @default(true)
  defaultInterventionDuration Int       @default(60) // in minuti
  defaultBufferTime           Int       @default(15) // tempo tra interventi
  colorScheme                 Json? // colori personalizzati per stati
  googleCalendarId            String?
  googleCalendarConnected     Boolean   @default(false)
  googleSyncEnabled           Boolean   @default(false)
  lastGoogleSync              DateTime?
  notificationSettings        Json? // preferenze notifiche
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  professional User @relation(fields: [professionalId], references: [id])
}

model CalendarAvailability {
  id             String   @id @default(cuid())
  professionalId String
  dayOfWeek      Int // 0 = Sunday, 6 = Saturday
  startTime      String // formato "HH:mm"
  endTime        String // formato "HH:mm"
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional User @relation(fields: [professionalId], references: [id])

  @@unique([professionalId, dayOfWeek])
}

model CalendarException {
  id             String   @id @default(cuid())
  professionalId String
  date           DateTime @db.Date
  isWorkingDay   Boolean // true = giorno lavorativo eccezionale, false = giorno non lavorativo
  startTime      String? // se isWorkingDay = true
  endTime        String? // se isWorkingDay = true
  reason         String? // es: "Ferie", "Malattia", "FestivitÃ "
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional User @relation(fields: [professionalId], references: [id])

  @@unique([professionalId, date])
  @@index([date])
}

model CalendarBlock {
  id               String   @id @default(cuid())
  professionalId   String
  startDateTime    DateTime
  endDateTime      DateTime
  reason           String?
  isRecurring      Boolean  @default(false)
  recurringPattern Json? // se isRecurring = true
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  professional User @relation(fields: [professionalId], references: [id])

  @@index([professionalId, startDateTime, endDateTime])
}

model GoogleCalendarToken {
  id             String   @id @default(cuid())
  professionalId String   @unique
  accessToken    String   @db.Text
  refreshToken   String   @db.Text
  expiryDate     DateTime
  scope          String?
  tokenType      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional User @relation(fields: [professionalId], references: [id])
}

// ==========================================
// SISTEMA PAGAMENTI E FATTURAZIONE - v5.0
// ==========================================

// Enum per modalitÃ  pagamento professionisti
enum PaymentMode {
  MANAGED // Tu incassi e poi paghi loro
  AUTONOMOUS // Incassano direttamente
  MIXED // Misto caso per caso
}

// Enum per frequenza payout
enum PayoutFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  ON_DEMAND
}

// Enum per metodi di pagamento
enum PaymentMethod {
  STRIPE
  PAYPAL
  BANK_TRANSFER
  CASH
  CARD
  WISE
  OTHER
}

// Enum per stati pagamento
enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PARTIALLY_REFUNDED
}

// Enum per tipo pagamento
enum PaymentType {
  BOOKING // Prenotazione servizio
  ACCESSORY // Accessori/materiali
  DEPOSIT // Acconto
  FINAL_PAYMENT // Saldo finale
  HOLD // Preautorizzazione
  SUBSCRIPTION // Abbonamento
  COMMISSION // Commissione marketplace
}

// Enum per stati fattura
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

// Enum per tipo documento
enum DocumentType {
  INVOICE // Fattura
  PROFORMA // Fattura proforma
  CREDIT_NOTE // Nota di credito
  DEBIT_NOTE // Nota di debito
  RECEIPT // Ricevuta
  ELECTRONIC // Fattura elettronica
}

// Impostazioni pagamento professionisti
model ProfessionalPaymentSettings {
  id             String @id @default(cuid())
  professionalId String @unique

  // ModalitÃ  incasso
  paymentMode PaymentMode @default(MANAGED)

  // Configurazione MANAGED
  payoutFrequency PayoutFrequency? @default(WEEKLY)
  payoutDay       Int? // 1-7 per settimana, 1-31 per mese
  minimumPayout   Float            @default(50.00)
  holdingDays     Int              @default(7) // Giorni trattenuta
  autoPayout      Boolean          @default(true)
  requireApproval Boolean          @default(false)

  // Dati bancari (criptati)
  paymentMethods Json? // Array di metodi
  primaryMethod  PaymentMethod?

  // Commissioni custom
  useStandardFees Boolean @default(true)
  customFees      Json? // Struttura commissioni personalizzate
  volumeTiers     Json? // Sconti per volume

  // Metadata
  notes       String?
  isActive    Boolean  @default(true)
  lastPayoutAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  professional User  @relation(fields: [professionalId], references: [id])
  updater      User? @relation("PaymentSettingsUpdatedBy", fields: [updatedBy], references: [id])
}

// Split pagamenti tra professionisti (per lavori condivisi)
model PaymentSplit {
  id             String  @id @default(cuid())
  paymentId      String
  professionalId String
  amount         Float? @default(0)
  percentage     Float?
  description    String?
  status         String  @default("PENDING") // PENDING, COMPLETED, FAILED
  processedAt    DateTime?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  payment      Payment @relation(fields: [paymentId], references: [id])
  professional User    @relation("ProfessionalSplits", fields: [professionalId], references: [id])

  @@index([paymentId])
  @@index([professionalId])
  @@index([status])
}

// Pagamenti principali
model Payment {
  id             String        @id @default(cuid())
  requestId      String?
  quoteId        String?
  professionalId String?
  clientId       String
  amount         Float
  currency       String        @default("EUR")
  type           PaymentType
  status         PaymentStatus @default(PENDING)
  method         PaymentMethod?

  // Stripe
  stripePaymentIntentId String? @unique
  stripeChargeId        String?
  stripeCustomerId      String?

  // Commission split
  platformFee       Float?
  professionalAmount Float?
  netAmount         Float?

  // Tracking
  paidAt       DateTime?
  refundedAt   DateTime?
  failedAt     DateTime?
  failureReason String?

  // Metadata
  description String?
  notes       String?
  metadata    Json?
  receiptUrl  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  // Relazioni
  request      AssistanceRequest? @relation(fields: [requestId], references: [id])
  quote        Quote?             @relation(fields: [quoteId], references: [id])
  professional User?              @relation("ProfessionalPayments", fields: [professionalId], references: [id])
  client       User               @relation("ClientPayments", fields: [clientId], references: [id])
  creator      User?              @relation("PaymentCreatedBy", fields: [createdBy], references: [id])

  splits   PaymentSplit[]
  invoices Invoice[]
  refunds  Refund[]

  @@index([requestId])
  @@index([quoteId])
  @@index([professionalId])
  @@index([clientId])
  @@index([status])
  @@index([stripePaymentIntentId])
  @@index([paidAt])
}

// Fatture
model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique
  requestId      String?
  quoteId        String?
  paymentId      String?
  professionalId String?
  customerId     String

  // Tipo documento
  documentType DocumentType @default(INVOICE)
  status       InvoiceStatus @default(DRAFT)

  // Importi
  subtotal Float? @default(0)
  taxAmount Float? @default(0)
  taxRate Float? @default(22)
  total    Float? @default(0)
  paidAmount Float @default(0)
  currency String @default("EUR")

  // Date
  issueDate  DateTime? @default(now())
  dueDate    DateTime?
  paidDate   DateTime?
  sentAt     DateTime?
  reminderSentAt DateTime?

  // Contenuto
  items       Json? // Array di line items
  customerData Json? // Dati cliente snapshot
  notes       String?
  terms       String?
  footerNotes String?

  // File
  pdfUrl      String?
  pdfPath     String?
  generatedAt DateTime?
  
  // Fatturazione Elettronica
  isElectronic Boolean @default(false)
  sdiStatus String?
  xmlFile String?
  electronicProvider String?

  // Metadata
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  // Relazioni
  request      AssistanceRequest? @relation(fields: [requestId], references: [id])
  quote        Quote?             @relation(fields: [quoteId], references: [id])
  payment      Payment?           @relation(fields: [paymentId], references: [id])
  professional User?              @relation("ProfessionalInvoices", fields: [professionalId], references: [id])
  customer     User               @relation("CustomerInvoices", fields: [customerId], references: [id])
  creator      User?              @relation("InvoiceCreatedBy", fields: [createdBy], references: [id])

  @@index([invoiceNumber])
  @@index([requestId])
  @@index([quoteId])
  @@index([paymentId])
  @@index([professionalId])
  @@index([customerId])
  @@index([status])
  @@index([issueDate])
}

// Modello Nota di Credito (Credit Note)
model CreditNote {
  id                  String   @id @default(cuid())
  creditNoteNumber    String   @unique
  originalInvoiceId   String
  reason              String
  issueDate           DateTime @default(now())
  
  // Dati cliente (snapshot)
  customerId         String?
  customerName       String
  customerAddress    String
  customerCity       String
  customerZipCode    String
  customerProvince   String
  customerCountry    String
  customerVatNumber  String?
  customerFiscalCode String?
  
  // Items
  lineItems Json // Array di line items
  
  // Importi
  subtotal    Float
  taxAmount   Float
  totalAmount Float
  
  // Stato
  status String @default("ISSUED")
  
  // Metadata
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([originalInvoiceId])
  @@index([creditNoteNumber])
  @@index([customerId])
}

// Payout (pagamenti ai professionisti)
model Payout {
  id             String @id @default(cuid())
  professionalId String
  amount         Float? @default(0)
  currency       String @default("EUR")
  method         PaymentMethod?
  status         String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED

  // Stripe Connect
  stripeTransferId String? @unique

  // Date
  scheduledFor DateTime?
  processedAt  DateTime?
  failedAt     DateTime?
  completedAt  DateTime?

  // Errori
  failureReason String?
  errorDetails  Json?

  // Metadata
  description     String?
  notes           String?
  metadata        Json?
  includesPayments Json? // Array di payment IDs inclusi

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  processedBy String?

  professional User  @relation("ProfessionalPayouts", fields: [professionalId], references: [id])
  processor    User? @relation("PayoutProcessedBy", fields: [processedBy], references: [id])

  @@index([professionalId])
  @@index([status])
  @@index([scheduledFor])
  @@index([stripeTransferId])
}

// Rimborsi
model Refund {
  id        String @id @default(cuid())
  paymentId String
  amount    Float
  currency  String @default("EUR")
  reason    String?
  status    String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED

  // Stripe
  stripeRefundId String? @unique

  // Date
  requestedAt DateTime  @default(now())
  processedAt DateTime?
  failedAt    DateTime?
  completedAt DateTime?

  // Metadata
  failureReason String?
  notes         String?
  metadata      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  payment Payment @relation(fields: [paymentId], references: [id])
  creator User?   @relation("RefundCreatedBy", fields: [createdBy], references: [id])

  @@index([paymentId])
  @@index([status])
  @@index([stripeRefundId])
}

// Regole commissioni
model CommissionRule {
  id             String  @id @default(cuid())
  name           String
  description    String?
  professionalId String?
  categoryId     String?

  // Tipo commissione
  commissionType String @default("PERCENTAGE") // PERCENTAGE, FIXED, TIERED
  percentage     Float?
  fixedAmount    Float?
  tiers          Json? // Per commissioni a scaglioni

  // Condizioni
  minAmount Float?
  maxAmount Float?
  conditions Json?

  // PrioritÃ  e attivazione
  priority  Int     @default(0)
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  // Date validitÃ 
  validFrom DateTime?
  validTo   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  professional User? @relation(fields: [professionalId], references: [id])

  @@index([professionalId])
  @@index([categoryId])
  @@index([isActive])
  @@index([priority])
}

// Stripe Connect per professionisti
model StripeConnect {
  id             String @id @default(cuid())
  professionalId String @unique

  // Stripe Account
  stripeAccountId       String  @unique
  stripeAccountType     String? // standard, express, custom
  chargesEnabled        Boolean @default(false)
  payoutsEnabled        Boolean @default(false)
  detailsSubmitted      Boolean @default(false)
  requirementsCurrently Json?
  requirementsEventually Json?

  // Metadata
  metadata Json?

  // Date
  connectedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  professional User @relation(fields: [professionalId], references: [id])

  @@index([stripeAccountId])
}

// ==========================================
// SISTEMA TRACKING MODULI - NUOVO v5.1
// ==========================================

model ModuleHistory {
  id         String   @id @default(cuid())
  userId     String
  moduleType String   // 'REFERRAL', 'PORTFOLIO', 'PAYMENT', etc
  action     String   // 'CREATED', 'UPDATED', 'VIEWED', etc
  entityId   String?  // ID dell'entitÃ  (referralId, portfolioId, etc)
  metadata   Json?
  
  // Campi per sistema moduli (opzionali)
  moduleCode String?  // Codice modulo sistema
  performedBy String? // User ID che ha eseguito l'azione
  oldValue   Json?    // Valore precedente
  newValue   Json?    // Nuovo valore
  reason     String?  // Motivo modifica
  
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id])
  referral Referral? @relation(fields: [entityId], references: [id])

  @@index([userId])
  @@index([moduleType])
  @@index([action])
  @@index([createdAt])
  @@index([moduleCode])
  @@index([performedBy])
}


// ============================================

// ==========================================
// SISTEMA PEC (RECLAMI) - NUOVO 18/01/2025
// ==========================================

// Enum per stati reclamo
enum ComplaintStatus {
  DRAFT       // Bozza
  SUBMITTED   // Inviato
  SENDING     // In invio (PEC)
  SENT        // Inviato (PEC)
  IN_REVIEW   // In revisione
  RESOLVED    // Risolto
  REJECTED    // Respinto
  CLOSED      // Chiuso
}

// Enum per prioritÃ  reclamo
enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Enum per nomi moduli sistema
enum ModuleName {
  AUTHENTICATION
  NOTIFICATIONS
  PAYMENTS
  WHATSAPP
  AI_ASSISTANT
  CALENDAR
  REPORTS
  BACKUP
  ANALYTICS
  SECURITY
  COMPLAINTS  // PEC system
  COMMUNICATION
  ADVANCED
  REPORTING
  AUTOMATION
  INTEGRATIONS
  ADMIN
}

// Tabella reclami (complaints)
model Complaint {
  id          String   @id @default(cuid())
  userId      String
  requestId   String?  // PuÃ² essere collegato a una richiesta
  
  // Dati reclamo
  subject     String
  description String   @db.Text
  category    String?  // Es: 'service', 'payment', 'communication'
  priority    ComplaintPriority @default(MEDIUM)
  status      ComplaintStatus   @default(SUBMITTED)
  
  // Tracking
  submittedAt   DateTime  @default(now())
  reviewedAt    DateTime?
  resolvedAt    DateTime?
  closedAt      DateTime?
  
  // Assegnazione
  assignedTo    String?   // Admin che gestisce il reclamo
  
  // Risposta
  response      String?   @db.Text
  internalNotes String?   @db.Text // Note interne non visibili al cliente
  
  // Allegati
  attachments   Json?     // Array di URL file allegati
  
  // Audit
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relazioni
  user    User               @relation("UserComplaints", fields: [userId], references: [id])
  request AssistanceRequest? @relation("RequestComplaints", fields: [requestId], references: [id])
  
  @@index([userId])
  @@index([requestId])
  @@index([status])
  @@index([priority])
  @@index([submittedAt])
}

// Tabella bozze reclami (per salvare reclami non ancora inviati)
model ComplaintDraft {
  id          String   @id @default(cuid())
  userId      String
  requestId   String?
  
  // Dati bozza
  subject     String?
  description String?  @db.Text
  category    String?
  priority    ComplaintPriority @default(MEDIUM)
  
  // Allegati temporanei
  attachments Json?
  
  // Auto-save tracking
  lastSavedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Scadenza bozza (elimina dopo 30 giorni)
  expiresAt   DateTime?
  
  // Relazione
  user User @relation("UserComplaintDrafts", fields: [userId], references: [id])
  
  @@index([userId])
  @@index([expiresAt])
}

// Tabella per tracciare attivazioni/disattivazioni moduli
// ==========================================
// ENUM SISTEMA MODULI - NUOVO v5.1
// ==========================================

// Categorie moduli
enum ModuleCategory {
  CORE           // Moduli essenziali del sistema
  BUSINESS       // FunzionalitÃ  business principali
  COMMUNICATION  // Sistema comunicazioni
  ADVANCED       // FunzionalitÃ  avanzate
  REPORTING      // Sistema reportistica
  AUTOMATION     // Automazioni
  INTEGRATIONS   // Integrazioni esterne
  ADMIN          // Amministrazione
  SECURITY       // Sicurezza
}

// Tipi di impostazioni moduli
enum SettingType {
  STRING         // Testo semplice
  NUMBER         // Numero
  BOOLEAN        // Vero/Falso
  PASSWORD       // Password (criptata)
  JSON           // Oggetto JSON
  SELECT         // Selezione da lista
  MULTI_SELECT   // Selezione multipla
  TEXT           // Testo lungo
  EMAIL          // Email
  URL            // URL
}

// Azioni sui moduli
enum ModuleAction {
  ENABLED        // Modulo abilitato
  DISABLED       // Modulo disabilitato
  INSTALLED      // Modulo installato
  UNINSTALLED    // Modulo disinstallato
  UPDATED        // Modulo aggiornato
  CONFIGURED     // Modulo configurato
}

// ==========================================
// TABELLE SISTEMA MODULI - NUOVO v5.1
// ==========================================

// Tabella moduli sistema (66 moduli)
model SystemModule {
  id          String         @id @default(cuid())
  code        String         @unique // es: 'auth', 'payments', 'whatsapp'
  name        String         // Nome visualizzato
  description String?        // Descrizione funzionalitÃ 
  category    ModuleCategory // Categoria modulo
  icon        String?        // Emoji o icon name
  color       String?        // Colore hex (#RRGGBB)
  
  // Stato
  isCore      Boolean  @default(false) // Modulo essenziale (non disattivabile)
  isEnabled   Boolean  @default(true)  // Modulo attivo
  isActive    Boolean  @default(true)  // Modulo disponibile
  
  // Configurazione
  config      Json?           // Configurazione specifica modulo
  dependsOn   String[]   @default([])     // Array codici moduli dipendenze
  requiredFor String[]   @default([])     // Array codici moduli che richiedono questo modulo
  order       Int     @default(0) // Ordine visualizzazione
  
  // Tracking abilitazione/disabilitazione
  enabledAt   DateTime?       // Quando Ã¨ stato abilitato
  enabledBy   String?         // Chi ha abilitato
  disabledAt  DateTime?       // Quando Ã¨ stato disabilitato
  disabledBy  String?         // Chi ha disabilitato
  
  // Metadata
  version     String?         // Versione modulo
  author      String?         // Autore/Fornitore
  
  // Timestamp
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relazioni
  settings    ModuleSetting[]
  
  @@index([code])
  @@index([category])
  @@index([isEnabled])
  @@index([isActive])
}

// Tabella impostazioni moduli
model ModuleSetting {
  id          String      @id @default(cuid())
  moduleCode  String      // Riferimento a SystemModule.code
  key         String      // Chiave impostazione (es: 'api_key', 'max_retries')
  value       String?     // Valore impostazione (string)
  type        SettingType // Tipo dato
  
  // Metadata
  label       String      // Label visualizzata
  description String?     // Descrizione aiuto
  placeholder String?     // Placeholder input
  
  // Validazione
  validation  Json?       // Regole validazione (min, max, pattern, etc)
  isRequired  Boolean  @default(false)
  isSecret    Boolean  @default(false) // Per password/API keys
  
  // UI
  order       Int      @default(0)
  group       String?  // Raggruppamento impostazioni
  category    String?  // Categoria impostazione
  
  // Timestamp
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relazioni
  module      SystemModule @relation(fields: [moduleCode], references: [code])
  
  @@unique([moduleCode, key])
  @@index([moduleCode])
  @@index([type])
}

// ==========================================
// TABELLE NOTIFICHE AVANZATE - FIX 09/10/2025
// ==========================================

// Tracciamento consegne notifiche
model NotificationDelivery {
  id             String   @id @default(cuid())
  notificationId String
  channel        String   // EMAIL, SMS, WHATSAPP, PUSH
  status         String   // PENDING, SENT, DELIVERED, FAILED
  messageId      String?  // ID messaggio provider
  deliveredAt    DateTime?
  failedAt       DateTime?
  error          String?  @db.Text
  attempts       Int      @default(0)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([notificationId])
  @@index([channel])
  @@index([status])
}

// Sottoscrizioni Push Web
model PushSubscription {
  id             String   @id @default(cuid())
  userId         String
  endpoint       String   @db.Text
  keys           Json     // p256dh e auth
  deviceType     String?  // mobile, desktop, tablet
  deviceName     String?
  browser        String?
  isActive       Boolean  @default(true)
  lastUsedAt     DateTime?
  unsubscribedAt DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([userId])
  @@index([isActive])
}

// Notifiche programmate
model ScheduledNotification {
  id           String   @id @default(cuid())
  userId       String
  type         String
  priority     String   @default("NORMAL")
  title        String
  message      String   @db.Text
  data         Json?
  channels     String[] @default([])
  scheduledAt  DateTime
  processedAt  DateTime?
  status       String   @default("SCHEDULED")
  attempts     Int      @default(0)
  error        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([scheduledAt])
  @@index([status])
}

// Storia abilitazioni moduli
model ModuleActivation {
  id         String       @id @default(cuid())
  moduleCode String
  action     ModuleAction
  userId     String
  referralId String?
  metadata   Json?
  createdAt  DateTime     @default(now())
  
  user     User      @relation(fields: [userId], references: [id])
  referral Referral? @relation(fields: [referralId], references: [id])
  
  @@index([moduleCode])
  @@index([action])
  @@index([userId])
  @@index([createdAt])
}


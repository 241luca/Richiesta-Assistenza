version: '3.8'

# ==========================================
# DOCKER COMPOSE PER VPS
# Usa immagini pre-compilate da GitHub Container Registry
# ==========================================

services:
  # ==========================================
  # DATABASE - PostgreSQL
  # ==========================================
  database:
    image: postgres:16-alpine
    container_name: assistenza-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: assistenza_db
      POSTGRES_USER: assistenza_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U assistenza_user -d assistenza_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - assistenza-network

  # ==========================================
  # REDIS - Cache e Code
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: assistenza-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - assistenza-network

  # ==========================================
  # BACKEND - Express API
  # Immagine da GitHub Container Registry
  # ==========================================
  backend:
    image: ghcr.io/241luca/richiesta-assistenza-backend:latest
    container_name: assistenza-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3200
      DATABASE_URL: postgresql://assistenza_user:${DB_PASSWORD}@database:5432/assistenza_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      BACKEND_URL: ${BACKEND_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      ALLOWED_ORIGINS: ${FRONTEND_URL}
      WHATSAPP_SERVICE_URL: http://whatsapp:3201
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_backups:/app/backups
    ports:
      - "3200:3200"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3200/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - assistenza-network

  # ==========================================
  # WHATSAPP - WppConnect (CONTAINER SEPARATO!)
  # Immagine da GitHub Container Registry
  # ==========================================
  whatsapp:
    image: ghcr.io/241luca/richiesta-assistenza-whatsapp:latest
    container_name: assistenza-whatsapp
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3201
      DATABASE_URL: postgresql://assistenza_user:${DB_PASSWORD}@database:5432/assistenza_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      WHATSAPP_PROVIDER: wppconnect
      WPPCONNECT_SESSION_NAME: assistenza
      WPPCONNECT_AUTO_CLOSE: "false"
      WPPCONNECT_HEADLESS: "true"
    volumes:
      - whatsapp_tokens:/app/tokens
      - whatsapp_logs:/app/logs
    ports:
      - "3201:3201"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Limiti risorse per non saturare
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3201/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - assistenza-network

  # ==========================================
  # FRONTEND - React + Nginx
  # Immagine da GitHub Container Registry
  # ==========================================
  frontend:
    image: ghcr.io/241luca/richiesta-assistenza-frontend:latest
    container_name: assistenza-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - assistenza-network

# ==========================================
# VOLUMES - Dati persistenti
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_backups:
    driver: local
  whatsapp_tokens:
    driver: local
  whatsapp_logs:
    driver: local

# ==========================================
# NETWORK - Comunicazione interna
# ==========================================
networks:
  assistenza-network:
    driver: bridge
